/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

module generator

import "pkl:reflect"

awsImports = import*("@aws/*/*.pkl")


open class Resolvable {
    type: String
    clazz: Class
    typeLower = type.toLowerCase()
    moduleName: String
    importName: String = moduleName.replaceAll(".pkl", "").split("/").last
}

function GetAllResolvableTypes() = new Listing<Resolvable> {
    for (modName, modValue in awsImports.toMap()) {
        when(reflect.Module(modValue).classes.length > 0) {
            for (className, v in reflect.Module(modValue).classes) {
                for (prop in v.properties) {
                    when(prop.name == "type" && v.supertype.referent.name == "Resolvable") {
                        new Resolvable {
                            moduleName = "\(modName)"
                            type = "\(prop.defaultValue)"
                            clazz = v.reflectee
                        }
                    }
                }
            }
        }
    }
}

function MapResolvableResourceUri(): Map<String, Resolvable> =
    let (res = GetAllResolvableTypes().fold(Map(), (acc: Map<String, Resolvable>, item) ->
        let (typeUri = item.type)
            if (acc.containsKey(typeUri)) throw ("Duplicate Resolvable Type URI: \(typeUri)") else acc.put(typeUri, item)
    ))
    res

output {
    text = MapResolvableResourceUri().getOrNull("AWS::ApiGateway::ApiKey")?.clazz.simpleName
}