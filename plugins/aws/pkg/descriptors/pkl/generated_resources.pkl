/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

import "./types.pkl"

// This file is auto-generated by resources.pkl
resources = List(
    new types.ResourceType {
    Type = "AWS::ApiGateway::ApiKey"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "APIKeyId"; Tags = "Tags"; Hints { ["CustomerId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Enabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GenerateDistinctId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StageKeys"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Value"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CustomerId"; "Description"; "Enabled"; "GenerateDistinctId"; "Name"; "StageKeys"; "Tags"; "Value" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::Deployment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DeploymentId"; Tags = ""; Hints { ["DeploymentCanarySettings"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RestApiId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["StageDescription"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["StageName"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "DeploymentCanarySettings"; "Description"; "RestApiId"; "StageDescription"; "StageName" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ApiGateway::RestApi"] = List(new types.ListProperty { ParentProperty = "RestApiId"; ListParameter = "RestApiId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::Method"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ResourceId"; Tags = ""; Hints { ["ApiKeyRequired"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AuthorizationScopes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AuthorizationType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AuthorizerId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HttpMethod"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Integration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MethodResponses"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OperationName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RequestModels"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RequestParameters"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RequestValidatorId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RestApiId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ApiKeyRequired"; "AuthorizationScopes"; "AuthorizationType"; "AuthorizerId"; "HttpMethod"; "Integration"; "MethodResponses"; "OperationName"; "RequestModels"; "RequestParameters"; "RequestValidatorId"; "ResourceId"; "RestApiId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::Resource"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ResourceId"; Tags = ""; Hints { ["ParentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PathPart"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RestApiId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ParentId"; "PathPart"; "RestApiId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ApiGateway::RestApi"] = List(new types.ListProperty { ParentProperty = "RestApiId"; ListParameter = "RestApiId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::RestApi"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RestApiId"; Tags = "Tags"; Hints { ["ApiKeySourceType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BinaryMediaTypes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Body"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["BodyS3Location"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CloneFrom"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DisableExecuteApiEndpoint"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EndpointConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FailOnWarnings"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["MinimumCompressionSize"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Mode"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Parameters"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Policy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ApiKeySourceType"; "BinaryMediaTypes"; "Body"; "BodyS3Location"; "CloneFrom"; "Description"; "DisableExecuteApiEndpoint"; "EndpointConfiguration"; "FailOnWarnings"; "MinimumCompressionSize"; "Mode"; "Name"; "Parameters"; "Policy"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::Stage"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "StageName"; Tags = "Tags"; Hints { ["AccessLogSetting"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CacheClusterEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CacheClusterSize"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CanarySetting"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClientCertificateId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeploymentId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DocumentationVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MethodSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RestApiId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["StageName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TracingEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Variables"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AccessLogSetting"; "CacheClusterEnabled"; "CacheClusterSize"; "CanarySetting"; "ClientCertificateId"; "DeploymentId"; "Description"; "DocumentationVersion"; "MethodSettings"; "RestApiId"; "StageName"; "Tags"; "TracingEnabled"; "Variables" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ApiGateway::RestApi"] = List(new types.ListProperty { ParentProperty = "RestApiId"; ListParameter = "RestApiId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::UsagePlan"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["ApiStages"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Quota"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Throttle"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UsagePlanName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ApiStages"; "Description"; "Quota"; "Tags"; "Throttle"; "UsagePlanName" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ApiGateway::UsagePlanKey"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = ""; Hints { ["KeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["KeyType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["UsagePlanId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "KeyId"; "KeyType"; "UsagePlanId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ApiGateway::UsagePlan"] = List(new types.ListProperty { ParentProperty = "Id"; ListParameter = "UsagePlanId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::CloudFront::Distribution"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["DistributionConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DistributionConfig"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::DynamoDB::GlobalTable"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TableName"; Tags = "Tags"; Hints { ["AttributeDefinitions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["BillingMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GlobalSecondaryIndexes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KeySchema"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["LocalSecondaryIndexes"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PointInTimeRecoverySpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Replicas"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SSESpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StreamSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TableName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TimeToLiveSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["WarmThroughput"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["WriteOnDemandThroughputSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["WriteProvisionedThroughputSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AttributeDefinitions"; "BillingMode"; "GlobalSecondaryIndexes"; "KeySchema"; "LocalSecondaryIndexes"; "PointInTimeRecoverySpecification"; "Replicas"; "SSESpecification"; "StreamSpecification"; "TableName"; "TimeToLiveSpecification"; "WarmThroughput"; "WriteOnDemandThroughputSettings"; "WriteProvisionedThroughputSettings" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::DynamoDB::Table"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TableName"; Tags = "Tags"; Hints { ["AttributeDefinitions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BillingMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ContributorInsightsSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeletionProtectionEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GlobalSecondaryIndexes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ImportSourceSpecification"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["KeySchema"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["KinesisStreamSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocalSecondaryIndexes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OnDemandThroughput"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PointInTimeRecoverySpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProvisionedThroughput"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourcePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SSESpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StreamSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TableClass"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TableName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TimeToLiveSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["WarmThroughput"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AttributeDefinitions"; "BillingMode"; "ContributorInsightsSpecification"; "DeletionProtectionEnabled"; "GlobalSecondaryIndexes"; "ImportSourceSpecification"; "KeySchema"; "KinesisStreamSpecification"; "LocalSecondaryIndexes"; "OnDemandThroughput"; "PointInTimeRecoverySpecification"; "ProvisionedThroughput"; "ResourcePolicy"; "SSESpecification"; "StreamSpecification"; "TableClass"; "TableName"; "Tags"; "TimeToLiveSpecification"; "WarmThroughput" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::CapacityReservation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "TagSpecifications"; Hints { ["AvailabilityZone"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["AvailabilityZoneId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EbsOptimized"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EndDate"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EndDateType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EphemeralStorage"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["InstanceMatchCriteria"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstancePlatform"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["InstanceType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["OutPostArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlacementGroupArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TagSpecifications"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tenancy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UnusedReservationBillingOwnerId"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "AvailabilityZone"; "AvailabilityZoneId"; "EbsOptimized"; "EndDate"; "EndDateType"; "EphemeralStorage"; "InstanceCount"; "InstanceMatchCriteria"; "InstancePlatform"; "InstanceType"; "OutPostArn"; "PlacementGroupArn"; "TagSpecifications"; "Tenancy"; "UnusedReservationBillingOwnerId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::CapacityReservationFleet"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "CapacityReservationFleetId"; Tags = "TagSpecifications"; Hints { ["AllocationStrategy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EndDate"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceMatchCriteria"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceTypeSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NoRemoveEndDate"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RemoveEndDate"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TagSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tenancy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TotalTargetCapacity"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AllocationStrategy"; "EndDate"; "InstanceMatchCriteria"; "InstanceTypeSpecifications"; "NoRemoveEndDate"; "RemoveEndDate"; "TagSpecifications"; "Tenancy"; "TotalTargetCapacity" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::CarrierGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "CarrierGatewayId"; Tags = "Tags"; Hints { ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::ClientVpnAuthorizationRule"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["AccessGroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AuthorizeAllGroups"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClientVpnEndpointId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetNetworkCidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AccessGroupId"; "AuthorizeAllGroups"; "ClientVpnEndpointId"; "Description"; "TargetNetworkCidr" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::ClientVpnEndpoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "TagSpecifications"; Hints { ["AuthenticationOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ClientCidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ClientConnectOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClientLoginBannerOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ConnectionLogOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DnsServers"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroupIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SelfServicePortal"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServerCertificateArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SessionTimeoutHours"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SplitTunnel"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TagSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransportProtocol"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpnPort"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AuthenticationOptions"; "ClientCidrBlock"; "ClientConnectOptions"; "ClientLoginBannerOptions"; "ConnectionLogOptions"; "Description"; "DnsServers"; "SecurityGroupIds"; "SelfServicePortal"; "ServerCertificateArn"; "SessionTimeoutHours"; "SplitTunnel"; "TagSpecifications"; "TransportProtocol"; "VpcId"; "VpnPort" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::ClientVpnRoute"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["ClientVpnEndpointId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationCidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TargetVpcSubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ClientVpnEndpointId"; "Description"; "DestinationCidrBlock"; "TargetVpcSubnetId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::ClientVpnTargetNetworkAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["ClientVpnEndpointId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ClientVpnEndpointId"; "SubnetId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::CustomerGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "CustomerGatewayId"; Tags = "Tags"; Hints { ["BgpAsn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BgpAsnExtended"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CertificateArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeviceName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Type"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "BgpAsn"; "BgpAsnExtended"; "CertificateArn"; "DeviceName"; "IpAddress"; "Tags"; "Type" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::DHCPOptions"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DhcpOptionsId"; Tags = "Tags"; Hints { ["DomainName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainNameServers"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6AddressPreferredLeaseTime"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetbiosNameServers"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetbiosNodeType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NtpServers"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DomainName"; "DomainNameServers"; "Ipv6AddressPreferredLeaseTime"; "NetbiosNameServers"; "NetbiosNodeType"; "NtpServers"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::EC2Fleet"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "FleetId"; Tags = "TagSpecifications"; Hints { ["Context"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ExcessCapacityTerminationPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LaunchTemplateConfigs"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["OnDemandOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReplaceUnhealthyInstances"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SpotOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TagSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetCapacitySpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TerminateInstancesWithExpiration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Type"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ValidFrom"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ValidUntil"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Context"; "ExcessCapacityTerminationPolicy"; "LaunchTemplateConfigs"; "OnDemandOptions"; "ReplaceUnhealthyInstances"; "SpotOptions"; "TagSpecifications"; "TargetCapacitySpecification"; "TerminateInstancesWithExpiration"; "Type"; "ValidFrom"; "ValidUntil" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::EgressOnlyInternetGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::EIP"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "PublicIp"; Tags = "Tags"; Hints { ["Address"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Domain"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["NetworkBorderGroup"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PublicIpv4Pool"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransferAddress"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "Address"; "Domain"; "InstanceId"; "IpamPoolId"; "NetworkBorderGroup"; "PublicIpv4Pool"; "Tags"; "TransferAddress" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::EIPAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["AllocationId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EIP"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateIpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AllocationId"; "EIP"; "InstanceId"; "NetworkInterfaceId"; "PrivateIpAddress" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::EnclaveCertificateIamRoleAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "CertificateArn"; Tags = null; Hints { ["CertificateArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RoleArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "CertificateArn"; "RoleArn" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::FlowLog"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["DeliverCrossAccountRole"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeliverLogsPermissionArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LogDestination"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LogDestinationType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LogFormat"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LogGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaxAggregationInterval"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ResourceType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TrafficType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DeliverCrossAccountRole"; "DeliverLogsPermissionArn"; "DestinationOptions"; "LogDestination"; "LogDestinationType"; "LogFormat"; "LogGroupName"; "MaxAggregationInterval"; "ResourceId"; "ResourceType"; "Tags"; "TrafficType" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::GatewayRouteTableAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "GatewayId"; Tags = null; Hints { ["GatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RouteTableId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "GatewayId"; "RouteTableId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::Host"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "HostId"; Tags = null; Hints { ["AssetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AutoPlacement"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZone"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["HostMaintenance"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostRecovery"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceFamily"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OutpostArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AssetId"; "AutoPlacement"; "AvailabilityZone"; "HostMaintenance"; "HostRecovery"; "InstanceFamily"; "InstanceType"; "OutpostArn" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::Instance"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "InstanceId"; Tags = "Tags"; Hints { ["AdditionalInfo"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Affinity"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZone"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BlockDeviceMappings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CpuOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CreditSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DisableApiTermination"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EbsOptimized"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ElasticGpuSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ElasticInferenceAccelerators"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnclaveOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HibernationOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostResourceGroupArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IamInstanceProfile"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ImageId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceInitiatedShutdownBehavior"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6AddressCount"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6Addresses"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["KernelId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KeyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LaunchTemplate"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["LicenseSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Monitoring"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaces"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlacementGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateDnsNameOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateIpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PropagateTagsToVolumeOnCreation"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["RamdiskId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroupIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroups"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceDestCheck"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SsmAssociations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tenancy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UserData"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Volumes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AdditionalInfo"; "Affinity"; "AvailabilityZone"; "BlockDeviceMappings"; "CpuOptions"; "CreditSpecification"; "DisableApiTermination"; "EbsOptimized"; "ElasticGpuSpecifications"; "ElasticInferenceAccelerators"; "EnclaveOptions"; "HibernationOptions"; "HostId"; "HostResourceGroupArn"; "IamInstanceProfile"; "ImageId"; "InstanceInitiatedShutdownBehavior"; "InstanceType"; "Ipv6AddressCount"; "Ipv6Addresses"; "KernelId"; "KeyName"; "LaunchTemplate"; "LicenseSpecifications"; "Monitoring"; "NetworkInterfaces"; "PlacementGroupName"; "PrivateDnsNameOptions"; "PrivateIpAddress"; "PropagateTagsToVolumeOnCreation"; "RamdiskId"; "SecurityGroupIds"; "SecurityGroups"; "SourceDestCheck"; "SsmAssociations"; "SubnetId"; "Tags"; "Tenancy"; "UserData"; "Volumes" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::InstanceConnectEndpoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["ClientToken"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["PreserveClientIp"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroupIds"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ClientToken"; "PreserveClientIp"; "SecurityGroupIds"; "SubnetId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::InternetGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "InternetGatewayId"; Tags = "Tags"; Hints { ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAM"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamId"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnablePrivateGua"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OperatingRegions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "EnablePrivateGua"; "OperatingRegions"; "Tags"; "Tier" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAMAllocation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamPoolId"; Tags = null; Hints { ["Cidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "Cidr"; "Description"; "IpamPoolId"; "NetmaskLength" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::IPAMPool"] = List(new types.ListProperty { ParentProperty = "IpamPoolId"; ListParameter = "IpamPoolId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAMPool"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamPoolId"; Tags = "Tags"; Hints { ["AddressFamily"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["AllocationDefaultNetmaskLength"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AllocationMaxNetmaskLength"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AllocationMinNetmaskLength"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AllocationResourceTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AutoImport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AwsService"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpamScopeId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Locale"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProvisionedCidrs"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PublicIpSource"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PubliclyAdvertisable"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceIpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceResource"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AddressFamily"; "AllocationDefaultNetmaskLength"; "AllocationMaxNetmaskLength"; "AllocationMinNetmaskLength"; "AllocationResourceTags"; "AutoImport"; "AwsService"; "Description"; "IpamScopeId"; "Locale"; "ProvisionedCidrs"; "PublicIpSource"; "PubliclyAdvertisable"; "SourceIpamPoolId"; "SourceResource"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAMPoolCidr"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamPoolId"; Tags = null; Hints { ["Cidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Cidr"; "IpamPoolId"; "NetmaskLength" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::IPAMPool"] = List(new types.ListProperty { ParentProperty = "IpamPoolId"; ListParameter = "IpamPoolId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAMResourceDiscovery"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamResourceDiscoveryId"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OperatingRegions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "OperatingRegions"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAMResourceDiscoveryAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamResourceDiscoveryAssociationId"; Tags = "Tags"; Hints { ["IpamId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["IpamResourceDiscoveryId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "IpamId"; "IpamResourceDiscoveryId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::IPAMScope"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IpamScopeId"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpamId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "IpamId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::KeyPair"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "KeyName"; Tags = "Tags"; Hints { ["KeyFormat"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["KeyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["KeyType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PublicKeyMaterial"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "KeyFormat"; "KeyName"; "KeyType"; "PublicKeyMaterial"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::LaunchTemplate"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "LaunchTemplateId"; Tags = "TagSpecifications"; Hints { ["LaunchTemplateData"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = true }; ["LaunchTemplateName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TagSpecifications"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["VersionDescription"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "LaunchTemplateData"; "LaunchTemplateName"; "TagSpecifications"; "VersionDescription" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::LocalGatewayRoute"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DestinationCidrBlock"; Tags = null; Hints { ["DestinationCidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocalGatewayRouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocalGatewayVirtualInterfaceGroupId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DestinationCidrBlock"; "LocalGatewayRouteTableId"; "LocalGatewayVirtualInterfaceGroupId"; "NetworkInterfaceId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::LocalGatewayRouteTable"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "LocalGatewayRouteTableId"; Tags = "Tags"; Hints { ["LocalGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Mode"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "LocalGatewayId"; "Mode"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"; Tags = "Tags"; Hints { ["LocalGatewayRouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["LocalGatewayVirtualInterfaceGroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "LocalGatewayRouteTableId"; "LocalGatewayVirtualInterfaceGroupId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::LocalGatewayRouteTableVPCAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "LocalGatewayRouteTableVpcAssociationId"; Tags = "Tags"; Hints { ["LocalGatewayRouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "LocalGatewayRouteTableId"; "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NatGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "NatGatewayId"; Tags = "Tags"; Hints { ["AllocationId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ConnectivityType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaxDrainDurationSeconds"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["PrivateIpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecondaryAllocationIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecondaryPrivateIpAddressCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecondaryPrivateIpAddresses"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AllocationId"; "ConnectivityType"; "MaxDrainDurationSeconds"; "PrivateIpAddress"; "SecondaryAllocationIds"; "SecondaryPrivateIpAddressCount"; "SecondaryPrivateIpAddresses"; "SubnetId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkAcl"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkAclEntry"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["CidrBlock"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Egress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Icmp"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6CidrBlock"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkAclId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PortRange"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Protocol"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RuleAction"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RuleNumber"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "CidrBlock"; "Egress"; "Icmp"; "Ipv6CidrBlock"; "NetworkAclId"; "PortRange"; "Protocol"; "RuleAction"; "RuleNumber" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInsightsAccessScope"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "NetworkInsightsAccessScopeId"; Tags = "Tags"; Hints { ["ExcludePaths"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["MatchPaths"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ExcludePaths"; "MatchPaths"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInsightsAccessScopeAnalysis"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "NetworkInsightsAccessScopeAnalysisId"; Tags = "Tags"; Hints { ["NetworkInsightsAccessScopeId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "NetworkInsightsAccessScopeId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInsightsAnalysis"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "NetworkInsightsAnalysisId"; Tags = "Tags"; Hints { ["AdditionalAccounts"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FilterInArns"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInsightsPathId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AdditionalAccounts"; "FilterInArns"; "NetworkInsightsPathId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInsightsPath"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "NetworkInsightsPathId"; Tags = "Tags"; Hints { ["Destination"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationIp"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationPort"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FilterAtDestination"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FilterAtSource"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Protocol"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Source"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SourceIp"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Destination"; "DestinationIp"; "DestinationPort"; "FilterAtDestination"; "FilterAtSource"; "Protocol"; "Source"; "SourceIp"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInterface"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["ConnectionTrackingSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnablePrimaryIpv6"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GroupSet"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InterfaceType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv4PrefixCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv4Prefixes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6AddressCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6Addresses"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6PrefixCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6Prefixes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateIpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateIpAddresses"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecondaryPrivateIpAddressCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceDestCheck"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ConnectionTrackingSpecification"; "Description"; "EnablePrimaryIpv6"; "GroupSet"; "InterfaceType"; "Ipv4PrefixCount"; "Ipv4Prefixes"; "Ipv6AddressCount"; "Ipv6Addresses"; "Ipv6PrefixCount"; "Ipv6Prefixes"; "PrivateIpAddress"; "PrivateIpAddresses"; "SecondaryPrivateIpAddressCount"; "SourceDestCheck"; "SubnetId"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInterfaceAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AttachmentId"; Tags = null; Hints { ["DeleteOnTermination"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeviceIndex"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EnaSrdSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "DeleteOnTermination"; "DeviceIndex"; "EnaSrdSpecification"; "InstanceId"; "NetworkInterfaceId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkInterfacePermission"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["AwsAccountId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Permission"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AwsAccountId"; "NetworkInterfaceId"; "Permission" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::NetworkPerformanceMetricSubscription"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Source"; Tags = null; Hints { ["Destination"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Metric"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Source"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Statistic"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Destination"; "Metric"; "Source"; "Statistic" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::PlacementGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "GroupName"; Tags = "Tags"; Hints { ["PartitionCount"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SpreadLevel"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Strategy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "PartitionCount"; "SpreadLevel"; "Strategy"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::PrefixList"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "PrefixListId"; Tags = "Tags"; Hints { ["AddressFamily"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Entries"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaxEntries"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrefixListName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AddressFamily"; "Entries"; "MaxEntries"; "PrefixListName"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::Route"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = ""; Hints { ["CarrierGatewayId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CoreNetworkArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationCidrBlock"] { CreateOnly = true; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationIpv6CidrBlock"] { CreateOnly = true; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationPrefixListId"] { CreateOnly = true; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EgressOnlyInternetGatewayId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GatewayId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocalGatewayId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NatGatewayId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RouteTableId"] { CreateOnly = true; Persist = true; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcEndpointId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcPeeringConnectionId"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CarrierGatewayId"; "CoreNetworkArn"; "DestinationCidrBlock"; "DestinationIpv6CidrBlock"; "DestinationPrefixListId"; "EgressOnlyInternetGatewayId"; "GatewayId"; "InstanceId"; "LocalGatewayId"; "NatGatewayId"; "NetworkInterfaceId"; "RouteTableId"; "TransitGatewayId"; "VpcEndpointId"; "VpcPeeringConnectionId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::RouteTable"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SecurityGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "GroupId"; Tags = "Tags"; Hints { ["GroupDescription"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["GroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "GroupDescription"; "GroupName"; "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SecurityGroupEgress"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["CidrIp"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CidrIpv6"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationPrefixListId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationSecurityGroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FromPort"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["IpProtocol"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ToPort"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CidrIp"; "CidrIpv6"; "Description"; "DestinationPrefixListId"; "DestinationSecurityGroupId"; "FromPort"; "GroupId"; "IpProtocol"; "ToPort" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SecurityGroupIngress"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["CidrIp"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CidrIpv6"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FromPort"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpProtocol"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SourcePrefixListId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceSecurityGroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceSecurityGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceSecurityGroupOwnerId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ToPort"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CidrIp"; "CidrIpv6"; "Description"; "FromPort"; "GroupId"; "GroupName"; "IpProtocol"; "SourcePrefixListId"; "SourceSecurityGroupId"; "SourceSecurityGroupName"; "SourceSecurityGroupOwnerId"; "ToPort" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SecurityGroupVpcAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "GroupId"; Tags = null; Hints { ["GroupId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "GroupId"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SnapshotBlockPublicAccess"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AccountId"; Tags = null; Hints { ["State"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "State" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SpotFleet"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["SpotFleetRequestConfigData"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "SpotFleetRequestConfigData" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::Subnet"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "SubnetId"; Tags = "Tags"; Hints { ["AssignIpv6AddressOnCreation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZone"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZoneId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableDns64"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableLniAtDeviceIndex"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv4IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv4NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6Native"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["MapPublicIpOnLaunch"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OutpostArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateDnsNameOptionsOnLaunch"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AssignIpv6AddressOnCreation"; "AvailabilityZone"; "AvailabilityZoneId"; "CidrBlock"; "EnableDns64"; "EnableLniAtDeviceIndex"; "Ipv4IpamPoolId"; "Ipv4NetmaskLength"; "Ipv6CidrBlock"; "Ipv6IpamPoolId"; "Ipv6Native"; "Ipv6NetmaskLength"; "MapPublicIpOnLaunch"; "OutpostArn"; "PrivateDnsNameOptionsOnLaunch"; "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SubnetCidrBlock"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["Ipv6CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Ipv6CidrBlock"; "Ipv6IpamPoolId"; "Ipv6NetmaskLength"; "SubnetId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SubnetNetworkAclAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AssociationId"; Tags = null; Hints { ["NetworkAclId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "NetworkAclId"; "SubnetId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::SubnetRouteTableAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["RouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "RouteTableId"; "SubnetId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TrafficMirrorFilter"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkServices"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "NetworkServices"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TrafficMirrorFilterRule"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationCidrBlock"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DestinationPortRange"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Protocol"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RuleAction"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RuleNumber"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SourceCidrBlock"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SourcePortRange"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TrafficDirection"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TrafficMirrorFilterId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Description"; "DestinationCidrBlock"; "DestinationPortRange"; "Protocol"; "RuleAction"; "RuleNumber"; "SourceCidrBlock"; "SourcePortRange"; "Tags"; "TrafficDirection"; "TrafficMirrorFilterId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TrafficMirrorSession"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PacketLength"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SessionNumber"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TrafficMirrorFilterId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TrafficMirrorTargetId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VirtualNetworkId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "NetworkInterfaceId"; "PacketLength"; "SessionNumber"; "Tags"; "TrafficMirrorFilterId"; "TrafficMirrorTargetId"; "VirtualNetworkId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TrafficMirrorTarget"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GatewayLoadBalancerEndpointId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkLoadBalancerArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "GatewayLoadBalancerEndpointId"; "NetworkInterfaceId"; "NetworkLoadBalancerArn"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["AmazonSideAsn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AssociationDefaultRouteTableId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AutoAcceptSharedAttachments"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DefaultRouteTableAssociation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DefaultRouteTablePropagation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DnsSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MulticastSupport"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PropagationDefaultRouteTableId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroupReferencingSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayCidrBlocks"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpnEcmpSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AmazonSideAsn"; "AssociationDefaultRouteTableId"; "AutoAcceptSharedAttachments"; "DefaultRouteTableAssociation"; "DefaultRouteTablePropagation"; "Description"; "DnsSupport"; "MulticastSupport"; "PropagationDefaultRouteTableId"; "SecurityGroupReferencingSupport"; "Tags"; "TransitGatewayCidrBlocks"; "VpnEcmpSupport" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Options"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Options"; "SubnetIds"; "Tags"; "TransitGatewayId"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayConnect"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayAttachmentId"; Tags = "Tags"; Hints { ["Options"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransportTransitGatewayAttachmentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Options"; "Tags"; "TransportTransitGatewayAttachmentId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayMulticastDomain"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayMulticastDomainId"; Tags = "Tags"; Hints { ["Options"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Options"; "Tags"; "TransitGatewayId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayMulticastDomainAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayMulticastDomainId"; Tags = null; Hints { ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayAttachmentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayMulticastDomainId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "SubnetId"; "TransitGatewayAttachmentId"; "TransitGatewayMulticastDomainId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::TransitGatewayMulticastDomain"] = List(new types.ListProperty { ParentProperty = "TransitGatewayMulticastDomainId"; ListParameter = "TransitGatewayMulticastDomainId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayMulticastGroupMember"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayMulticastDomainId"; Tags = null; Hints { ["GroupIpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayMulticastDomainId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "GroupIpAddress"; "NetworkInterfaceId"; "TransitGatewayMulticastDomainId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::TransitGatewayMulticastDomain"] = List(new types.ListProperty { ParentProperty = "TransitGatewayMulticastDomainId"; ListParameter = "TransitGatewayMulticastDomainId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayMulticastGroupSource"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayMulticastDomainId"; Tags = null; Hints { ["GroupIpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NetworkInterfaceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayMulticastDomainId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "GroupIpAddress"; "NetworkInterfaceId"; "TransitGatewayMulticastDomainId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::TransitGatewayMulticastDomain"] = List(new types.ListProperty { ParentProperty = "TransitGatewayMulticastDomainId"; ListParameter = "TransitGatewayMulticastDomainId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayPeeringAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayAttachmentId"; Tags = "Tags"; Hints { ["PeerAccountId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PeerRegion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PeerTransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PeerAccountId"; "PeerRegion"; "PeerTransitGatewayId"; "Tags"; "TransitGatewayId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayRoute"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayRouteTableId"; Tags = null; Hints { ["Blackhole"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationCidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayAttachmentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayRouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Blackhole"; "DestinationCidrBlock"; "TransitGatewayAttachmentId"; "TransitGatewayRouteTableId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::TransitGatewayRouteTable"] = List(new types.ListProperty { ParentProperty = "TransitGatewayRouteTableId"; ListParameter = "TransitGatewayRouteTableId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayRouteTable"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayRouteTableId"; Tags = "Tags"; Hints { ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Tags"; "TransitGatewayId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayRouteTableAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayRouteTableId"; Tags = null; Hints { ["TransitGatewayAttachmentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayRouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "TransitGatewayAttachmentId"; "TransitGatewayRouteTableId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::TransitGatewayRouteTable"] = List(new types.ListProperty { ParentProperty = "TransitGatewayRouteTableId"; ListParameter = "TransitGatewayRouteTableId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayRouteTablePropagation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TransitGatewayRouteTableId"; Tags = null; Hints { ["TransitGatewayAttachmentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TransitGatewayRouteTableId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "TransitGatewayAttachmentId"; "TransitGatewayRouteTableId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::TransitGatewayRouteTable"] = List(new types.ListProperty { ParentProperty = "TransitGatewayRouteTableId"; ListParameter = "TransitGatewayRouteTableId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::TransitGatewayVpcAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["AddSubnetIds"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Options"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RemoveSubnetIds"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SubnetIds"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AddSubnetIds"; "Options"; "RemoveSubnetIds"; "SubnetIds"; "Tags"; "TransitGatewayId"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VerifiedAccessEndpoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VerifiedAccessEndpointId"; Tags = "Tags"; Hints { ["ApplicationDomain"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["AttachmentType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainCertificateArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EndpointDomainPrefix"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EndpointType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["LoadBalancerOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkInterfaceOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroupIds"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SseSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VerifiedAccessGroupId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ApplicationDomain"; "AttachmentType"; "Description"; "DomainCertificateArn"; "EndpointDomainPrefix"; "EndpointType"; "LoadBalancerOptions"; "NetworkInterfaceOptions"; "PolicyDocument"; "PolicyEnabled"; "SecurityGroupIds"; "SseSpecification"; "Tags"; "VerifiedAccessGroupId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VerifiedAccessGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VerifiedAccessGroupId"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SseSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VerifiedAccessInstanceId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Description"; "PolicyDocument"; "PolicyEnabled"; "SseSpecification"; "Tags"; "VerifiedAccessInstanceId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VerifiedAccessInstance"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VerifiedAccessInstanceId"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FipsEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoggingConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VerifiedAccessTrustProviderIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VerifiedAccessTrustProviders"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "FipsEnabled"; "LoggingConfigurations"; "Tags"; "VerifiedAccessTrustProviderIds"; "VerifiedAccessTrustProviders" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VerifiedAccessTrustProvider"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VerifiedAccessTrustProviderId"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeviceOptions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeviceTrustProviderType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OidcOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyReferenceName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SseSpecification"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TrustProviderType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["UserTrustProviderType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "DeviceOptions"; "DeviceTrustProviderType"; "OidcOptions"; "PolicyReferenceName"; "SseSpecification"; "Tags"; "TrustProviderType"; "UserTrustProviderType" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::Volume"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VolumeId"; Tags = "Tags"; Hints { ["AutoEnableIO"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZone"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Encrypted"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Iops"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MultiAttachEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OutpostArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Size"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SnapshotId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Throughput"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VolumeType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AutoEnableIO"; "AvailabilityZone"; "Encrypted"; "Iops"; "KmsKeyId"; "MultiAttachEnabled"; "OutpostArn"; "Size"; "SnapshotId"; "Tags"; "Throughput"; "VolumeType" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VolumeAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VolumeId"; Tags = null; Hints { ["Device"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VolumeId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Device"; "InstanceId"; "VolumeId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPC"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VpcId"; Tags = "Tags"; Hints { ["CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableDnsHostnames"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableDnsSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InstanceTenancy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv4IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv4NetmaskLength"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CidrBlock"; "EnableDnsHostnames"; "EnableDnsSupport"; "InstanceTenancy"; "Ipv4IpamPoolId"; "Ipv4NetmaskLength"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCBlockPublicAccessExclusion"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ExclusionId"; Tags = "Tags"; Hints { ["InternetGatewayExclusionMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "InternetGatewayExclusionMode"; "SubnetId"; "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCBlockPublicAccessOptions"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AccountId"; Tags = null; Hints { ["InternetGatewayBlockMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "InternetGatewayBlockMode" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCCidrBlock"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["AmazonProvidedIpv6CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv4IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv4NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6CidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6CidrBlockNetworkBorderGroup"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Ipv6IpamPoolId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6NetmaskLength"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Ipv6Pool"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AmazonProvidedIpv6CidrBlock"; "CidrBlock"; "Ipv4IpamPoolId"; "Ipv4NetmaskLength"; "Ipv6CidrBlock"; "Ipv6CidrBlockNetworkBorderGroup"; "Ipv6IpamPoolId"; "Ipv6NetmaskLength"; "Ipv6Pool"; "VpcId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EC2::VPC"] = List(new types.ListProperty { ParentProperty = "VpcId"; ListParameter = "VpcId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCDHCPOptionsAssociation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DhcpOptionsId"; Tags = null; Hints { ["DhcpOptionsId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "DhcpOptionsId"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCEndpoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["DnsOptions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpAddressType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateDnsEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourceConfigurationArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RouteTableIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroupIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServiceName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServiceNetworkArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcEndpointType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "DnsOptions"; "IpAddressType"; "PolicyDocument"; "PrivateDnsEnabled"; "ResourceConfigurationArn"; "RouteTableIds"; "SecurityGroupIds"; "ServiceName"; "ServiceNetworkArn"; "SubnetIds"; "Tags"; "VpcEndpointType"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCEndpointConnectionNotification"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VPCEndpointConnectionNotificationId"; Tags = null; Hints { ["ConnectionEvents"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ConnectionNotificationArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ServiceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VPCEndpointId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ConnectionEvents"; "ConnectionNotificationArn"; "ServiceId"; "VPCEndpointId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCEndpointService"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ServiceId"; Tags = "Tags"; Hints { ["AcceptanceRequired"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ContributorInsightsEnabled"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["GatewayLoadBalancerArns"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkLoadBalancerArns"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PayerResponsibility"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AcceptanceRequired"; "ContributorInsightsEnabled"; "GatewayLoadBalancerArns"; "NetworkLoadBalancerArns"; "PayerResponsibility"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCEndpointServicePermissions"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ServiceId"; Tags = null; Hints { ["AllowedPrincipals"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServiceId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AllowedPrincipals"; "ServiceId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCGatewayAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AttachmentType"; Tags = null; Hints { ["InternetGatewayId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpnGatewayId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "InternetGatewayId"; "VpcId"; "VpnGatewayId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPCPeeringConnection"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["PeerOwnerId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PeerRegion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PeerRoleArn"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["PeerVpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PeerOwnerId"; "PeerRegion"; "PeerRoleArn"; "PeerVpcId"; "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPNConnection"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VpnConnectionId"; Tags = "Tags"; Hints { ["CustomerGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EnableAcceleration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocalIpv4NetworkCidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocalIpv6NetworkCidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OutsideIpAddressType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RemoteIpv4NetworkCidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RemoteIpv6NetworkCidr"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StaticRoutesOnly"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransitGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TransportTransitGatewayAttachmentId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TunnelInsideIpVersion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Type"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpnGatewayId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpnTunnelOptionsSpecifications"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CustomerGatewayId"; "EnableAcceleration"; "LocalIpv4NetworkCidr"; "LocalIpv6NetworkCidr"; "OutsideIpAddressType"; "RemoteIpv4NetworkCidr"; "RemoteIpv6NetworkCidr"; "StaticRoutesOnly"; "Tags"; "TransitGatewayId"; "TransportTransitGatewayAttachmentId"; "TunnelInsideIpVersion"; "Type"; "VpnGatewayId"; "VpnTunnelOptionsSpecifications" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPNConnectionRoute"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DestinationCidrBlock"; Tags = null; Hints { ["DestinationCidrBlock"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpnConnectionId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "DestinationCidrBlock"; "VpnConnectionId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPNGateway"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "VPNGatewayId"; Tags = "Tags"; Hints { ["AmazonSideAsn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Type"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AmazonSideAsn"; "Tags"; "Type" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EC2::VPNGatewayRoutePropagation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["RouteTableIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VpnGatewayId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "RouteTableIds"; "VpnGatewayId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECR::PullThroughCacheRule"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "EcrRepositoryPrefix"; Tags = null; Hints { ["CredentialArn"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["EcrRepositoryPrefix"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UpstreamRegistry"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["UpstreamRegistryUrl"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CredentialArn"; "EcrRepositoryPrefix"; "UpstreamRegistry"; "UpstreamRegistryUrl" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECR::RegistryPolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RegistryId"; Tags = null; Hints { ["PolicyText"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PolicyText" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECR::ReplicationConfiguration"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RegistryId"; Tags = null; Hints { ["ReplicationConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ReplicationConfiguration" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECR::Repository"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RepositoryName"; Tags = "Tags"; Hints { ["EmptyOnDelete"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["EncryptionConfiguration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ImageScanningConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ImageTagMutability"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LifecyclePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RepositoryName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RepositoryPolicyText"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "EmptyOnDelete"; "EncryptionConfiguration"; "ImageScanningConfiguration"; "ImageTagMutability"; "LifecyclePolicy"; "RepositoryName"; "RepositoryPolicyText"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECR::RepositoryCreationTemplate"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Prefix"; Tags = "ResourceTags"; Hints { ["AppliedFor"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["CustomRoleArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EncryptionConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ImageTagMutability"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LifecyclePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Prefix"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RepositoryPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourceTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AppliedFor"; "CustomRoleArn"; "Description"; "EncryptionConfiguration"; "ImageTagMutability"; "LifecyclePolicy"; "Prefix"; "RepositoryPolicy"; "ResourceTags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::CapacityProvider"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Name"; Tags = "Tags"; Hints { ["AutoScalingGroupProvider"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AutoScalingGroupProvider"; "Name"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::ClusterCapacityProviderAssociations"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Cluster"; Tags = null; Hints { ["CapacityProviders"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Cluster"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DefaultCapacityProviderStrategy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "CapacityProviders"; "Cluster"; "DefaultCapacityProviderStrategy" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::Cluster"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["CapacityProviders"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClusterName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClusterSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Configuration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DefaultCapacityProviderStrategy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServiceConnectDefaults"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CapacityProviders"; "ClusterName"; "ClusterSettings"; "Configuration"; "DefaultCapacityProviderStrategy"; "ServiceConnectDefaults"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::PrimaryTaskSet"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Cluster"; Tags = "Tags"; Hints { ["Cluster"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Service"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TaskSetId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Cluster"; "Service"; "TaskSetId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::Service"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["AvailabilityZoneRebalancing"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CapacityProviderStrategy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Cluster"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeploymentConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeploymentController"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DesiredCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableECSManagedTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableExecuteCommand"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckGracePeriodSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LaunchType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoadBalancers"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlacementConstraints"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlacementStrategies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlatformVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PropagateTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Role"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SchedulingStrategy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServiceConnectConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["ServiceName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServiceRegistries"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TaskDefinition"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VolumeConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["VpcLatticeConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AvailabilityZoneRebalancing"; "CapacityProviderStrategy"; "Cluster"; "DeploymentConfiguration"; "DeploymentController"; "DesiredCount"; "EnableECSManagedTags"; "EnableExecuteCommand"; "HealthCheckGracePeriodSeconds"; "LaunchType"; "LoadBalancers"; "NetworkConfiguration"; "PlacementConstraints"; "PlacementStrategies"; "PlatformVersion"; "PropagateTags"; "Role"; "SchedulingStrategy"; "ServiceConnectConfiguration"; "ServiceName"; "ServiceRegistries"; "Tags"; "TaskDefinition"; "VolumeConfigurations"; "VpcLatticeConfigurations" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::TaskDefinition"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["ContainerDefinitions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Cpu"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableFaultInjection"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EphemeralStorage"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ExecutionRoleArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Family"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InferenceAccelerators"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpcMode"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Memory"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkMode"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PidMode"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlacementConstraints"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProxyConfiguration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RequiresCompatibilities"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RuntimePlatform"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TaskRoleArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Volumes"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ContainerDefinitions"; "Cpu"; "EnableFaultInjection"; "EphemeralStorage"; "ExecutionRoleArn"; "Family"; "InferenceAccelerators"; "IpcMode"; "Memory"; "NetworkMode"; "PidMode"; "PlacementConstraints"; "ProxyConfiguration"; "RequiresCompatibilities"; "RuntimePlatform"; "Tags"; "TaskRoleArn"; "Volumes" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ECS::TaskSet"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Cluster"; Tags = "Tags"; Hints { ["CapacityProviderStrategy"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Cluster"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ExternalId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LaunchType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoadBalancers"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkConfiguration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlatformVersion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Scale"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Service"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ServiceRegistries"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TaskDefinition"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "CapacityProviderStrategy"; "Cluster"; "ExternalId"; "LaunchType"; "LoadBalancers"; "NetworkConfiguration"; "PlatformVersion"; "Scale"; "Service"; "ServiceRegistries"; "Tags"; "TaskDefinition" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ECS::Service"] = List(new types.ListProperty { ParentProperty = "ServiceName"; ListParameter = "Service" }, new types.ListProperty { ParentProperty = "Cluster"; ListParameter = "Cluster" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EFS::AccessPoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AccessPointId"; Tags = "AccessPointTags"; Hints { ["AccessPointTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClientToken"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["FileSystemId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PosixUser"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RootDirectory"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AccessPointTags"; "ClientToken"; "FileSystemId"; "PosixUser"; "RootDirectory" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EFS::FileSystem"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "FileSystemId"; Tags = "FileSystemTags"; Hints { ["AvailabilityZoneName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BackupPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BypassPolicyLockoutSafetyCheck"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Encrypted"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FileSystemPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FileSystemProtection"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FileSystemTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LifecyclePolicies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PerformanceMode"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProvisionedThroughputInMibps"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReplicationConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ThroughputMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AvailabilityZoneName"; "BackupPolicy"; "BypassPolicyLockoutSafetyCheck"; "Encrypted"; "FileSystemPolicy"; "FileSystemProtection"; "FileSystemTags"; "KmsKeyId"; "LifecyclePolicies"; "PerformanceMode"; "ProvisionedThroughputInMibps"; "ReplicationConfiguration"; "ThroughputMode" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EFS::MountTarget"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["FileSystemId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["IpAddress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SubnetId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "FileSystemId"; "IpAddress"; "SecurityGroups"; "SubnetId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EFS::FileSystem"] = List(new types.ListProperty { ParentProperty = "FileSystemId"; ListParameter = "FileSystemId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::EKS::Cluster"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["AccessConfig"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["BootstrapSelfManagedAddons"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ComputeConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EncryptionConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Force"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["KubernetesNetworkConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Logging"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OutpostConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RemoteNetworkConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourcesVpcConfig"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RoleArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["StorageConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UpgradePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Version"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ZonalShiftConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AccessConfig"; "BootstrapSelfManagedAddons"; "ComputeConfig"; "EncryptionConfig"; "Force"; "KubernetesNetworkConfig"; "Logging"; "Name"; "OutpostConfig"; "RemoteNetworkConfig"; "ResourcesVpcConfig"; "RoleArn"; "StorageConfig"; "Tags"; "UpgradePolicy"; "Version"; "ZonalShiftConfig" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::EKS::Nodegroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["AmiType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CapacityType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClusterName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DiskSize"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ForceUpdateEnabled"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["InstanceTypes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Labels"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LaunchTemplate"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NodeRepairConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NodeRole"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["NodegroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReleaseVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RemoteAccess"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ScalingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Subnets"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Taints"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UpdateConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Version"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AmiType"; "CapacityType"; "ClusterName"; "DiskSize"; "ForceUpdateEnabled"; "InstanceTypes"; "Labels"; "LaunchTemplate"; "NodeRepairConfig"; "NodeRole"; "NodegroupName"; "ReleaseVersion"; "RemoteAccess"; "ScalingConfig"; "Subnets"; "Tags"; "Taints"; "UpdateConfig"; "Version" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::EKS::Cluster"] = List(new types.ListProperty { ParentProperty = "Name"; ListParameter = "ClusterName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticBeanstalk::Application"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ApplicationName"; Tags = null; Hints { ["ApplicationName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ResourceLifecycleConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ApplicationName"; "Description"; "ResourceLifecycleConfig" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticBeanstalk::ApplicationVersion"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ApplicationName"; Tags = null; Hints { ["ApplicationName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceBundle"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ApplicationName"; "Description"; "SourceBundle" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticBeanstalk::ConfigurationTemplate"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ApplicationName"; Tags = null; Hints { ["ApplicationName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnvironmentId"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["OptionSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PlatformArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SolutionStackName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceConfiguration"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "ApplicationName"; "Description"; "EnvironmentId"; "OptionSettings"; "PlatformArn"; "SolutionStackName"; "SourceConfiguration" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticBeanstalk::Environment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "EnvironmentName"; Tags = "Tags"; Hints { ["ApplicationName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["CNAMEPrefix"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnvironmentName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OperationsRole"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OptionSettings"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["PlatformArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SolutionStackName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TemplateName"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VersionLabel"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ApplicationName"; "CNAMEPrefix"; "Description"; "EnvironmentName"; "OperationsRole"; "OptionSettings"; "PlatformArn"; "SolutionStackName"; "Tags"; "TemplateName"; "Tier"; "VersionLabel" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::Listener"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ListenerArn"; Tags = null; Hints { ["AlpnPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Certificates"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DefaultActions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ListenerAttributes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoadBalancerArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["MutualAuthentication"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Port"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Protocol"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SslPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AlpnPolicy"; "Certificates"; "DefaultActions"; "ListenerAttributes"; "LoadBalancerArn"; "MutualAuthentication"; "Port"; "Protocol"; "SslPolicy" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ElasticLoadBalancingV2::LoadBalancer"] = List(new types.ListProperty { ParentProperty = "LoadBalancerArn"; ListParameter = "LoadBalancerArn" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::ListenerCertificate"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Certificates"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ListenerArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Certificates"; "ListenerArn" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::ListenerRule"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RuleArn"; Tags = null; Hints { ["Actions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Conditions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ListenerArn"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Priority"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Actions"; "Conditions"; "ListenerArn"; "Priority" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ElasticLoadBalancingV2::Listener"] = List(new types.ListProperty { ParentProperty = "ListenerArn"; ListParameter = "ListenerArn" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["EnablePrefixForIpv6SourceNat"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpAddressType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoadBalancerAttributes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MinimumLoadBalancerCapacity"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Scheme"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecurityGroups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetMappings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Subnets"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Type"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "EnablePrefixForIpv6SourceNat"; "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic"; "IpAddressType"; "LoadBalancerAttributes"; "MinimumLoadBalancerCapacity"; "Name"; "Scheme"; "SecurityGroups"; "SubnetMappings"; "Subnets"; "Tags"; "Type" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::TargetGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TargetGroupArn"; Tags = "Tags"; Hints { ["HealthCheckEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckIntervalSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckPath"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckPort"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckProtocol"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckTimeoutSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthyThresholdCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IpAddressType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Matcher"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Port"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Protocol"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProtocolVersion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetGroupAttributes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Targets"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UnhealthyThresholdCount"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "HealthCheckEnabled"; "HealthCheckIntervalSeconds"; "HealthCheckPath"; "HealthCheckPort"; "HealthCheckProtocol"; "HealthCheckTimeoutSeconds"; "HealthyThresholdCount"; "IpAddressType"; "Matcher"; "Name"; "Port"; "Protocol"; "ProtocolVersion"; "Tags"; "TargetGroupAttributes"; "TargetType"; "Targets"; "UnhealthyThresholdCount"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::TrustStore"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TrustStoreArn"; Tags = "Tags"; Hints { ["CaCertificatesBundleS3Bucket"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CaCertificatesBundleS3Key"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CaCertificatesBundleS3ObjectVersion"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CaCertificatesBundleS3Bucket"; "CaCertificatesBundleS3Key"; "CaCertificatesBundleS3ObjectVersion"; "Name"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::ElasticLoadBalancingV2::TrustStoreRevocation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RevocationId"; Tags = "Tags"; Hints { ["RevocationContents"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["TrustStoreArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "RevocationContents"; "TrustStoreArn" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::ElasticLoadBalancingV2::TrustStore"] = List(new types.ListProperty { ParentProperty = "TrustStoreArn"; ListParameter = "TrustStoreArn" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::AccessKey"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["Serial"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Status"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UserName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Serial"; "Status"; "UserName" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::Group"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "GroupName"; Tags = null; Hints { ["GroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ManagedPolicyArns"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Path"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Policies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "GroupName"; "ManagedPolicyArns"; "Path"; "Policies" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::GroupPolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "PolicyName"; Tags = null; Hints { ["GroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "GroupName"; "PolicyDocument"; "PolicyName" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::InstanceProfile"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "InstanceProfileName"; Tags = null; Hints { ["InstanceProfileName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Path"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Roles"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "InstanceProfileName"; "Path"; "Roles" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::ManagedPolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "PolicyArn"; Tags = null; Hints { ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Groups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ManagedPolicyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Path"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Roles"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Users"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "Groups"; "ManagedPolicyName"; "Path"; "PolicyDocument"; "Roles"; "Users" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::OIDCProvider"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Arn"; Tags = "Tags"; Hints { ["ClientIdList"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ThumbprintList"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Url"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ClientIdList"; "Tags"; "ThumbprintList"; "Url" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::Policy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["Groups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PolicyName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Roles"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Users"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Groups"; "PolicyDocument"; "PolicyName"; "Roles"; "Users" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::Role"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["AssumeRolePolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ManagedPolicyArns"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaxSessionDuration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Path"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PermissionsBoundary"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Policies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RoleName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AssumeRolePolicyDocument"; "Description"; "ManagedPolicyArns"; "MaxSessionDuration"; "Path"; "PermissionsBoundary"; "Policies"; "RoleName"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::RolePolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "PolicyName"; Tags = null; Hints { ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RoleName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PolicyDocument"; "PolicyName"; "RoleName" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::IAM::Role"] = List(new types.ListProperty { ParentProperty = "RoleName"; ListParameter = "RoleName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::SAMLProvider"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Arn"; Tags = "Tags"; Hints { ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SamlMetadataDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Name"; "SamlMetadataDocument"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::ServerCertificate"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "ServerCertificateName"; Tags = "Tags"; Hints { ["CertificateBody"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CertificateChain"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Path"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PrivateKey"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["ServerCertificateName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CertificateBody"; "CertificateChain"; "Path"; "PrivateKey"; "ServerCertificateName"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::ServiceLinkedRole"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "RoleName"; Tags = null; Hints { ["AWSServiceName"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CustomSuffix"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AWSServiceName"; "CustomSuffix"; "Description" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::User"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "UserName"; Tags = "Tags"; Hints { ["Groups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoginProfile"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ManagedPolicyArns"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Path"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PermissionsBoundary"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Policies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UserName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Groups"; "LoginProfile"; "ManagedPolicyArns"; "Path"; "PermissionsBoundary"; "Policies"; "Tags"; "UserName" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::UserPolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "PolicyName"; Tags = null; Hints { ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PolicyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["UserName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PolicyDocument"; "PolicyName"; "UserName" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::UserToGroupAddition"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["GroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Users"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "GroupName"; "Users" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::IAM::VirtualMFADevice"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "SerialNumber"; Tags = "Tags"; Hints { ["Path"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Users"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["VirtualMfaDeviceName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Path"; "Tags"; "Users"; "VirtualMfaDeviceName" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::KMS::Key"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["BypassPolicyLockoutSafetyCheck"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableKeyRotation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Enabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KeyPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KeySpec"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KeyUsage"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MultiRegion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Origin"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PendingWindowInDays"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["RotationPeriodInDays"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "BypassPolicyLockoutSafetyCheck"; "Description"; "EnableKeyRotation"; "Enabled"; "KeyPolicy"; "KeySpec"; "KeyUsage"; "MultiRegion"; "Origin"; "PendingWindowInDays"; "RotationPeriodInDays"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::KMS::Alias"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = null; Hints { ["AliasName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TargetKeyId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AliasName"; "TargetKeyId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::CodeSigningConfig"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "CodeSigningConfigArn"; Tags = "Tags"; Hints { ["AllowedPublishers"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["CodeSigningPolicies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AllowedPublishers"; "CodeSigningPolicies"; "Description"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::EventInvokeConfig"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["DestinationConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FunctionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["MaximumEventAgeInSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaximumRetryAttempts"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Qualifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "DestinationConfig"; "FunctionName"; "MaximumEventAgeInSeconds"; "MaximumRetryAttempts"; "Qualifier" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::Lambda::Function"] = List(new types.ListProperty { ParentProperty = "FunctionName"; ListParameter = "FunctionName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::EventSourceMapping"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["AmazonManagedKafkaEventSourceConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BatchSize"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BisectBatchOnFunctionError"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DestinationConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DocumentDBEventSourceConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Enabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EventSourceArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FilterCriteria"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FunctionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["FunctionResponseTypes"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaximumBatchingWindowInSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaximumRecordAgeInSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaximumRetryAttempts"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MetricsConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ParallelizationFactor"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProvisionedPollerConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Queues"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ScalingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SelfManagedEventSource"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SelfManagedKafkaEventSourceConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceAccessConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StartingPosition"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StartingPositionTimestamp"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Topics"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TumblingWindowInSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AmazonManagedKafkaEventSourceConfig"; "BatchSize"; "BisectBatchOnFunctionError"; "DestinationConfig"; "DocumentDBEventSourceConfig"; "Enabled"; "EventSourceArn"; "FilterCriteria"; "FunctionName"; "FunctionResponseTypes"; "KmsKeyArn"; "MaximumBatchingWindowInSeconds"; "MaximumRecordAgeInSeconds"; "MaximumRetryAttempts"; "MetricsConfig"; "ParallelizationFactor"; "ProvisionedPollerConfig"; "Queues"; "ScalingConfig"; "SelfManagedEventSource"; "SelfManagedKafkaEventSourceConfig"; "SourceAccessConfigurations"; "StartingPosition"; "StartingPositionTimestamp"; "Tags"; "Topics"; "TumblingWindowInSeconds" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::Function"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "FunctionName"; Tags = "Tags"; Hints { ["Architectures"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Code"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["CodeSigningConfigArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeadLetterConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Environment"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EphemeralStorage"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FileSystemConfigs"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FunctionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Handler"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ImageConfig"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Layers"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoggingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MemorySize"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PackageType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RecursiveLoop"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReservedConcurrentExecutions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Role"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Runtime"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RuntimeManagementConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SnapStart"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Timeout"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TracingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Architectures"; "Code"; "CodeSigningConfigArn"; "DeadLetterConfig"; "Description"; "Environment"; "EphemeralStorage"; "FileSystemConfigs"; "FunctionName"; "Handler"; "ImageConfig"; "KmsKeyArn"; "Layers"; "LoggingConfig"; "MemorySize"; "PackageType"; "RecursiveLoop"; "ReservedConcurrentExecutions"; "Role"; "Runtime"; "RuntimeManagementConfig"; "SnapStart"; "Tags"; "Timeout"; "TracingConfig"; "VpcConfig" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::Alias"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AliasArn"; Tags = null; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FunctionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["FunctionVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ProvisionedConcurrencyConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RoutingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "FunctionName"; "FunctionVersion"; "Name"; "ProvisionedConcurrencyConfig"; "RoutingConfig" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::Lambda::Function"] = List(new types.ListProperty { ParentProperty = "FunctionName"; ListParameter = "FunctionName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::LayerVersion"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "LayerVersionArn"; Tags = null; Hints { ["CompatibleArchitectures"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CompatibleRuntimes"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Content"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = true }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LayerName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LicenseInfo"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CompatibleArchitectures"; "CompatibleRuntimes"; "Content"; "Description"; "LayerName"; "LicenseInfo" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::LayerVersionPermission"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["Action"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["LayerVersionArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["OrganizationId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Principal"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Action"; "LayerVersionArn"; "OrganizationId"; "Principal" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::Permission"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["Action"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EventSourceToken"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FunctionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["FunctionUrlAuthType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Principal"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PrincipalOrgID"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceAccount"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Action"; "EventSourceToken"; "FunctionName"; "FunctionUrlAuthType"; "Principal"; "PrincipalOrgID"; "SourceAccount"; "SourceArn" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::Lambda::Function"] = List(new types.ListProperty { ParentProperty = "FunctionName"; ListParameter = "FunctionName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::Url"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "FunctionUrl"; Tags = null; Hints { ["AuthType"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Cors"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InvokeMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Qualifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetFunctionArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AuthType"; "Cors"; "InvokeMode"; "Qualifier"; "TargetFunctionArn" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::Lambda::Function"] = List(new types.ListProperty { ParentProperty = "Arn"; ListParameter = "TargetFunctionArn" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::Lambda::Version"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Version"; Tags = null; Hints { ["CodeSha256"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FunctionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ProvisionedConcurrencyConfig"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RuntimePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CodeSha256"; "Description"; "FunctionName"; "ProvisionedConcurrencyConfig"; "RuntimePolicy" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::Lambda::Function"] = List(new types.ListProperty { ParentProperty = "FunctionName"; ListParameter = "FunctionName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::Logs::LogGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Arn"; Tags = "Tags"; Hints { ["DataProtectionPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FieldIndexPolicies"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LogGroupClass"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LogGroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["RetentionInDays"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DataProtectionPolicy"; "FieldIndexPolicies"; "KmsKeyId"; "LogGroupClass"; "LogGroupName"; "RetentionInDays"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::CustomDBEngineVersion"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = null; Hints { ["DatabaseInstallationFilesS3BucketName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DatabaseInstallationFilesS3Prefix"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Engine"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EngineVersion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ImageId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KMSKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Manifest"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceCustomDbEngineVersionIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Status"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UseAwsProvidedLatestImage"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false } }; Fields { "DatabaseInstallationFilesS3BucketName"; "DatabaseInstallationFilesS3Prefix"; "Description"; "Engine"; "EngineVersion"; "ImageId"; "KMSKeyId"; "Manifest"; "SourceCustomDbEngineVersionIdentifier"; "Status"; "Tags"; "UseAwsProvidedLatestImage" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBCluster"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBClusterIdentifier"; Tags = null; Hints { ["AllocatedStorage"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AssociatedRoles"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AutoMinorVersionUpgrade"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZones"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BacktrackWindow"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BackupRetentionPeriod"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ClusterScalabilityType"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CopyTagsToSnapshot"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterInstanceClass"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterParameterGroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBInstanceParameterGroupName"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["DBSubnetGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBSystemId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DatabaseInsightsMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DatabaseName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeletionProtection"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Domain"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainIAMRoleName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableCloudwatchLogsExports"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableGlobalWriteForwarding"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableHttpEndpoint"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableIAMDatabaseAuthentication"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableLocalWriteForwarding"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Engine"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineLifecycleSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GlobalClusterIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Iops"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ManageMasterUserPassword"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MasterUserPassword"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MasterUserSecret"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MasterUsername"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MonitoringInterval"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MonitoringRoleArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PerformanceInsightsEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PerformanceInsightsKmsKeyId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PerformanceInsightsRetentionPeriod"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Port"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PreferredBackupWindow"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PreferredMaintenanceWindow"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PubliclyAccessible"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReadEndpoint"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReplicationSourceIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RestoreToTime"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RestoreType"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["ScalingConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ServerlessV2ScalingConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SnapshotIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceDBClusterIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceRegion"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["StorageEncrypted"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StorageType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UseLatestRestorableTime"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["VpcSecurityGroupIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AllocatedStorage"; "AssociatedRoles"; "AutoMinorVersionUpgrade"; "AvailabilityZones"; "BacktrackWindow"; "BackupRetentionPeriod"; "ClusterScalabilityType"; "CopyTagsToSnapshot"; "DBClusterIdentifier"; "DBClusterInstanceClass"; "DBClusterParameterGroupName"; "DBInstanceParameterGroupName"; "DBSubnetGroupName"; "DBSystemId"; "DatabaseInsightsMode"; "DatabaseName"; "DeletionProtection"; "Domain"; "DomainIAMRoleName"; "EnableCloudwatchLogsExports"; "EnableGlobalWriteForwarding"; "EnableHttpEndpoint"; "EnableIAMDatabaseAuthentication"; "EnableLocalWriteForwarding"; "Engine"; "EngineLifecycleSupport"; "EngineMode"; "EngineVersion"; "GlobalClusterIdentifier"; "Iops"; "KmsKeyId"; "ManageMasterUserPassword"; "MasterUserPassword"; "MasterUserSecret"; "MasterUsername"; "MonitoringInterval"; "MonitoringRoleArn"; "NetworkType"; "PerformanceInsightsEnabled"; "PerformanceInsightsKmsKeyId"; "PerformanceInsightsRetentionPeriod"; "Port"; "PreferredBackupWindow"; "PreferredMaintenanceWindow"; "PubliclyAccessible"; "ReadEndpoint"; "ReplicationSourceIdentifier"; "RestoreToTime"; "RestoreType"; "ScalingConfiguration"; "ServerlessV2ScalingConfiguration"; "SnapshotIdentifier"; "SourceDBClusterIdentifier"; "SourceRegion"; "StorageEncrypted"; "StorageType"; "Tags"; "UseLatestRestorableTime"; "VpcSecurityGroupIds" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBClusterParameterGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBClusterParameterGroupName"; Tags = null; Hints { ["DBClusterParameterGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Family"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Parameters"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DBClusterParameterGroupName"; "Description"; "Family"; "Parameters"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBInstance"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBInstanceIdentifier"; Tags = "Tags"; Hints { ["AllocatedStorage"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AllowMajorVersionUpgrade"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["AssociatedRoles"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AutoMinorVersionUpgrade"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AutomaticBackupReplicationKmsKeyId"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["AutomaticBackupReplicationRegion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AvailabilityZone"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BackupRetentionPeriod"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CACertificateIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CertificateDetails"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CertificateRotationRestart"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["CharacterSetName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CopyTagsToSnapshot"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CustomIAMInstanceProfile"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterSnapshotIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBInstanceClass"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBInstanceIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["DBName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBParameterGroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["dbSecurityGroups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBSnapshotIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBSubnetGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBSystemId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DedicatedLogVolume"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeleteAutomatedBackups"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["DeletionProtection"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Domain"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainAuthSecretArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainDnsIps"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainFqdn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainIAMRoleName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DomainOu"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableCloudwatchLogsExports"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnableIAMDatabaseAuthentication"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EnablePerformanceInsights"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Endpoint"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Engine"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineLifecycleSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Iops"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LicenseModel"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ManageMasterUserPassword"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MasterUserPassword"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["MasterUserSecret"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MasterUsername"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaxAllocatedStorage"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MonitoringInterval"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MonitoringRoleArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MultiAZ"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NcharCharacterSetName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NetworkType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OptionGroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PerformanceInsightsKMSKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PerformanceInsightsRetentionPeriod"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Port"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PreferredBackupWindow"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PreferredMaintenanceWindow"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ProcessorFeatures"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PromotionTier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PubliclyAccessible"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReplicaMode"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RestoreTime"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceDBClusterIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceDBInstanceAutomatedBackupsArn"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceDBInstanceIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceDbiResourceId"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["SourceRegion"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["StorageEncrypted"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StorageThroughput"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StorageType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TdeCredentialArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TdeCredentialPassword"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Timezone"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["UseDefaultProcessorFeatures"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["UseLatestRestorableTime"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["VPCSecurityGroups"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AllocatedStorage"; "AllowMajorVersionUpgrade"; "AssociatedRoles"; "AutoMinorVersionUpgrade"; "AutomaticBackupReplicationKmsKeyId"; "AutomaticBackupReplicationRegion"; "AvailabilityZone"; "BackupRetentionPeriod"; "CACertificateIdentifier"; "CertificateDetails"; "CertificateRotationRestart"; "CharacterSetName"; "CopyTagsToSnapshot"; "CustomIAMInstanceProfile"; "DBClusterIdentifier"; "DBClusterSnapshotIdentifier"; "DBInstanceClass"; "DBInstanceIdentifier"; "DBName"; "DBParameterGroupName"; "dbSecurityGroups"; "DBSnapshotIdentifier"; "DBSubnetGroupName"; "DBSystemId"; "DedicatedLogVolume"; "DeleteAutomatedBackups"; "DeletionProtection"; "Domain"; "DomainAuthSecretArn"; "DomainDnsIps"; "DomainFqdn"; "DomainIAMRoleName"; "DomainOu"; "EnableCloudwatchLogsExports"; "EnableIAMDatabaseAuthentication"; "EnablePerformanceInsights"; "Endpoint"; "Engine"; "EngineLifecycleSupport"; "EngineVersion"; "Iops"; "KmsKeyId"; "LicenseModel"; "ManageMasterUserPassword"; "MasterUserPassword"; "MasterUserSecret"; "MasterUsername"; "MaxAllocatedStorage"; "MonitoringInterval"; "MonitoringRoleArn"; "MultiAZ"; "NcharCharacterSetName"; "NetworkType"; "OptionGroupName"; "PerformanceInsightsKMSKeyId"; "PerformanceInsightsRetentionPeriod"; "Port"; "PreferredBackupWindow"; "PreferredMaintenanceWindow"; "ProcessorFeatures"; "PromotionTier"; "PubliclyAccessible"; "ReplicaMode"; "RestoreTime"; "SourceDBClusterIdentifier"; "SourceDBInstanceAutomatedBackupsArn"; "SourceDBInstanceIdentifier"; "SourceDbiResourceId"; "SourceRegion"; "StorageEncrypted"; "StorageThroughput"; "StorageType"; "Tags"; "TdeCredentialArn"; "TdeCredentialPassword"; "Timezone"; "UseDefaultProcessorFeatures"; "UseLatestRestorableTime"; "VPCSecurityGroups" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBParameterGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = null; Hints { ["DBParameterGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Family"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Parameters"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DBParameterGroupName"; "Description"; "Family"; "Parameters"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBProxy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBProxyName"; Tags = null; Hints { ["Auth"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DBProxyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DebugLogging"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineFamily"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["IdleClientTimeout"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RequireTLS"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RoleArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcSecurityGroupIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcSubnetIds"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Auth"; "DBProxyName"; "DebugLogging"; "EngineFamily"; "IdleClientTimeout"; "RequireTLS"; "RoleArn"; "Tags"; "VpcSecurityGroupIds"; "VpcSubnetIds" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBProxyEndpoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBProxyEndpointArn"; Tags = null; Hints { ["DBProxyEndpointName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DBProxyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetRole"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcSecurityGroupIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcSubnetIds"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "DBProxyEndpointName"; "DBProxyName"; "Tags"; "TargetRole"; "VpcSecurityGroupIds"; "VpcSubnetIds" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBProxyTargetGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "TargetGroupArn"; Tags = ""; Hints { ["ConnectionPoolConfigurationInfo"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterIdentifiers"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBInstanceIdentifiers"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBProxyName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TargetGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "ConnectionPoolConfigurationInfo"; "DBClusterIdentifiers"; "DBInstanceIdentifiers"; "DBProxyName"; "TargetGroupName" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::RDS::DBProxy"] = List(new types.ListProperty { ParentProperty = "DBProxyName"; ListParameter = "DBProxyName" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBSecurityGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = null; Hints { ["DBSecurityGroupIngress"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EC2VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GroupDescription"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DBSecurityGroupIngress"; "EC2VpcId"; "GroupDescription"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBSecurityGroupIngress"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = ""; Hints { ["CIDRIP"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBSecurityGroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EC2SecurityGroupId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EC2SecurityGroupName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EC2SecurityGroupOwnerId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "CIDRIP"; "DBSecurityGroupName"; "EC2SecurityGroupId"; "EC2SecurityGroupName"; "EC2SecurityGroupOwnerId" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBShardGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBShardGroupIdentifier"; Tags = null; Hints { ["ComputeRedundancy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DBClusterIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DBShardGroupIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaxACU"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["MinACU"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["PubliclyAccessible"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ComputeRedundancy"; "DBClusterIdentifier"; "DBShardGroupIdentifier"; "MaxACU"; "MinACU"; "PubliclyAccessible"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::DBSubnetGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "DBSubnetGroupName"; Tags = "Tags"; Hints { ["DbSubnetGroupDescription"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DbSubnetGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DbSubnetGroupDescription"; "DbSubnetGroupName"; "SubnetIds"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::EventSubscription"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "SubscriptionName"; Tags = "Tags"; Hints { ["Enabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EventCategories"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SnsTopicArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SourceIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubscriptionName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Enabled"; "EventCategories"; "SnsTopicArn"; "SourceIds"; "SourceType"; "SubscriptionName"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::GlobalCluster"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "GlobalClusterIdentifier"; Tags = null; Hints { ["DeletionProtection"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Engine"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineLifecycleSupport"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EngineVersion"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GlobalClusterIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GlobalEndpoint"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceDBClusterIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["StorageEncrypted"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DeletionProtection"; "Engine"; "EngineLifecycleSupport"; "EngineVersion"; "GlobalClusterIdentifier"; "GlobalEndpoint"; "SourceDBClusterIdentifier"; "StorageEncrypted"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::Integration"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "IntegrationArn"; Tags = null; Hints { ["AdditionalEncryptionContext"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DataFilter"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IntegrationName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KMSKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SourceArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TargetArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AdditionalEncryptionContext"; "DataFilter"; "Description"; "IntegrationName"; "KMSKeyId"; "SourceArn"; "Tags"; "TargetArn" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::RDS::OptionGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "OptionGroupName"; Tags = null; Hints { ["EngineName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["MajorEngineVersion"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["OptionConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OptionGroupDescription"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["OptionGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "EngineName"; "MajorEngineVersion"; "OptionConfigurations"; "OptionGroupDescription"; "OptionGroupName"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::CidrCollection"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "HostedZoneTags"; Hints { ["Locations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Locations"; "Name" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::DNSSEC"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = ""; Hints { ["HostedZoneId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "HostedZoneId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::HealthCheck"
    Schema = new types.Schema { Nonprovisionable = true; Identifier = "Id"; Tags = "HealthCheckTags"; Hints { ["HealthCheckConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "HealthCheckConfig"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::HostedZone"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "HostedZoneTags"; Hints { ["HostedZoneTags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostedZoneConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["QueryLoggingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VPCs"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "HostedZoneTags"; "HostedZoneConfig"; "Name"; "QueryLoggingConfig"; "VPCs" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::KeySigningKey"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = null; Hints { ["HostedZoneId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["KeyManagementServiceArn"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Status"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "HostedZoneId"; "KeyManagementServiceArn"; "Name"; "Status" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::RecordSet"
    Schema = new types.Schema { Nonprovisionable = true; Identifier = "Id"; Tags = null; Hints { ["AliasTarget"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CidrRoutingConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Comment"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Failover"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GeoLocation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GeoProximityLocation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HealthCheckId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostedZoneId"] { CreateOnly = true; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostedZoneName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MultiValueAnswer"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = true; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ResourceRecords"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SetIdentifier"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["TTL"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Type"] { CreateOnly = false; Persist = true; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Weight"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AliasTarget"; "CidrRoutingConfig"; "Comment"; "Failover"; "GeoLocation"; "GeoProximityLocation"; "HealthCheckId"; "HostedZoneId"; "HostedZoneName"; "MultiValueAnswer"; "Name"; "ResourceRecords"; "SetIdentifier"; "TTL"; "Type"; "Weight" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping { ["AWS::Route53::HostedZone"] = List(new types.ListProperty { ParentProperty = "Id"; ListParameter = "HostedZoneId" }) }
    }
    , 
    new types.ResourceType {
    Type = "AWS::Route53::RecordSetGroup"
    Schema = new types.Schema { Nonprovisionable = true; Identifier = "Id"; Tags = null; Hints { ["Comment"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostedZoneId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["HostedZoneName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RecordSets"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Comment"; "HostedZoneId"; "HostedZoneName"; "RecordSets" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::AccessGrant"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AccessGrantId"; Tags = "Tags"; Hints { ["AccessGrantsLocationConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AccessGrantsLocationId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ApplicationArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Grantee"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Permission"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["S3PrefixType"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AccessGrantsLocationConfiguration"; "AccessGrantsLocationId"; "ApplicationArn"; "Grantee"; "Permission"; "S3PrefixType"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::AccessGrantsInstance"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AccessGrantsInstanceArn"; Tags = "Tags"; Hints { ["IdentityCenterArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "IdentityCenterArn"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::AccessGrantsLocation"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "AccessGrantsLocationId"; Tags = "Tags"; Hints { ["IamRoleArn"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LocationScope"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "IamRoleArn"; "LocationScope"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::Bucket"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "BucketName"; Tags = "Tags"; Hints { ["AccelerateConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AccessControl"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["AnalyticsConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BucketEncryption"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["BucketName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["CorsConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["IntelligentTieringConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["InventoryConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LifecycleConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["LoggingConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MetricsConfigurations"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["NotificationConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ObjectLockConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ObjectLockEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["OwnershipControls"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PublicAccessBlockConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReplicationConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VersioningConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["WebsiteConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "AccelerateConfiguration"; "AccessControl"; "AnalyticsConfigurations"; "BucketEncryption"; "BucketName"; "CorsConfiguration"; "IntelligentTieringConfigurations"; "InventoryConfigurations"; "LifecycleConfiguration"; "LoggingConfiguration"; "MetricsConfigurations"; "NotificationConfiguration"; "ObjectLockConfiguration"; "ObjectLockEnabled"; "OwnershipControls"; "PublicAccessBlockConfiguration"; "ReplicationConfiguration"; "Tags"; "VersioningConfiguration"; "WebsiteConfiguration" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::BucketPolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Bucket"; Tags = "Tags"; Hints { ["Bucket"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Bucket"; "PolicyDocument" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::MultiRegionAccessPoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Name"; Tags = null; Hints { ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PublicAccessBlockConfiguration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Regions"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "Name"; "PublicAccessBlockConfiguration"; "Regions" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::MultiRegionAccessPointPolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "MrapName"; Tags = null; Hints { ["MrapName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Policy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "MrapName"; "Policy" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::AccessPoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Name"; Tags = "Tags"; Hints { ["Bucket"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["BucketAccountId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Policy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["PublicAccessBlockConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VpcConfiguration"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Bucket"; "BucketAccountId"; "Name"; "Policy"; "PublicAccessBlockConfiguration"; "VpcConfiguration" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::StorageLens"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "StorageLensConfiguration.Id"; Tags = "Tags"; Hints { ["StorageLensConfiguration"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "StorageLensConfiguration"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::S3::StorageLensGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Name"; Tags = "Tags"; Hints { ["Filter"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Filter"; "Name"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SageMaker::Domain"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["AppNetworkAccessType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AppSecurityGroupManagement"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["AuthMode"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DefaultSpaceSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DefaultUserSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DomainName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["DomainSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SubnetIds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TagPropagation"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = true; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["VpcId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "AppNetworkAccessType"; "AppSecurityGroupManagement"; "AuthMode"; "DefaultSpaceSettings"; "DefaultUserSettings"; "DomainName"; "DomainSettings"; "KmsKeyId"; "SubnetIds"; "TagPropagation"; "Tags"; "VpcId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SageMaker::Endpoint"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["DeploymentConfig"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["EndpointConfigName"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["EndpointName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ExcludeRetainedVariantProperties"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["RetainAllVariantProperties"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["RetainDeploymentConfig"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DeploymentConfig"; "EndpointConfigName"; "EndpointName"; "ExcludeRetainedVariantProperties"; "RetainAllVariantProperties"; "RetainDeploymentConfig"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SageMaker::ModelPackageGroup"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["ModelPackageGroupDescription"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ModelPackageGroupName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ModelPackageGroupPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ModelPackageGroupDescription"; "ModelPackageGroupName"; "ModelPackageGroupPolicy"; "Tags" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SageMaker::UserProfile"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["DomainId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SingleSignOnUserIdentifier"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SingleSignOnUserValue"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["UserProfileName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["UserSettings"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "DomainId"; "SingleSignOnUserIdentifier"; "SingleSignOnUserValue"; "Tags"; "UserProfileName"; "UserSettings" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SecretsManager::ResourcePolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["BlockPublicPolicy"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["ResourcePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["SecretId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "BlockPublicPolicy"; "ResourcePolicy"; "SecretId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SecretsManager::RotationSchedule"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["HostedRotationLambda"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["RotateImmediatelyOnUpdate"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["RotationLambdaARN"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RotationRules"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecretId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "HostedRotationLambda"; "RotateImmediatelyOnUpdate"; "RotationLambdaARN"; "RotationRules"; "SecretId" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SecretsManager::Secret"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = "Tags"; Hints { ["Description"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["GenerateSecretString"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["KmsKeyId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Name"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["ReplicaRegions"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SecretString"] { CreateOnly = false; Persist = false; WriteOnly = true; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "Description"; "GenerateSecretString"; "KmsKeyId"; "Name"; "ReplicaRegions"; "SecretString"; "Tags" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SecretsManager::SecretTargetAttachment"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["SecretId"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TargetId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["TargetType"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "SecretId"; "TargetId"; "TargetType" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SQS::Queue"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = "Tags"; Hints { ["ContentBasedDeduplication"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DeduplicationScope"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["DelaySeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FifoQueue"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["FifoThroughputLimit"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsDataKeyReusePeriodSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["KmsMasterKeyId"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MaximumMessageSize"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["MessageRetentionPeriod"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["QueueName"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["ReceiveMessageWaitTimeSeconds"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RedriveAllowPolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["RedrivePolicy"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["SqsManagedSseEnabled"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["Tags"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false }; ["VisibilityTimeout"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = false; RequiredOnCreate = false } }; Fields { "ContentBasedDeduplication"; "DeduplicationScope"; "DelaySeconds"; "FifoQueue"; "FifoThroughputLimit"; "KmsDataKeyReusePeriodSeconds"; "KmsMasterKeyId"; "MaximumMessageSize"; "MessageRetentionPeriod"; "QueueName"; "ReceiveMessageWaitTimeSeconds"; "RedriveAllowPolicy"; "RedrivePolicy"; "SqsManagedSseEnabled"; "Tags"; "VisibilityTimeout" } }
    Discoverable = true
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SQS::QueueInlinePolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Ref"; Tags = null; Hints { ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Queue"] { CreateOnly = true; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PolicyDocument"; "Queue" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    , 
    new types.ResourceType {
    Type = "AWS::SQS::QueuePolicy"
    Schema = new types.Schema { Nonprovisionable = false; Identifier = "Id"; Tags = null; Hints { ["PolicyDocument"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false }; ["Queues"] { CreateOnly = false; Persist = false; WriteOnly = false; Required = true; RequiredOnCreate = false } }; Fields { "PolicyDocument"; "Queues" } }
    Discoverable = false
    ParentResourceTypesWithMappingProperties = new Mapping {}
    }
    )
