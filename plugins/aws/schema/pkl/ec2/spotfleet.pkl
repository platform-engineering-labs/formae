/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

module aws.ec2.spotfleet

import "@formae/formae.pkl"
import "../aws.pkl"

const type = "AWS::EC2::SpotFleet"

@aws.SubResourceHint
open class AcceleratorCount extends formae.SubResource {
    max: Int?
    min: Int?
}

@aws.SubResourceHint
open class AcceleratorTotalMemoryMiB extends formae.SubResource {
    max: Int?
    min: Int?
}

@aws.SubResourceHint
open class BaselineEbsBandwidthMbps extends formae.SubResource {
    max: Int?
    min: Int?
}

@aws.SubResourceHint
open class BaselinePerformanceFactors extends formae.SubResource {
    cpu: Cpu?
}

@aws.SubResourceHint
open class BlockDeviceMapping extends formae.SubResource {
    deviceName: String
    ebs: EBS?
    noDevice: String?
    virtualName: String?
}

@aws.SubResourceHint
open class ClassicLoadBalancer extends formae.SubResource {
    name: String
}

@aws.SubResourceHint
open class ClassicLoadBalancersConfig extends formae.SubResource {
    classicLoadBalancers: Listing<ClassicLoadBalancer>
}

@aws.SubResourceHint
open class Cpu extends formae.SubResource {
    references: Listing<Reference>?
}

typealias VolumeType = "gp2"|"gp3"|"io1"|"io2"|"sc1"|"st1"|"standard"

@aws.SubResourceHint
open class EBS extends formae.SubResource {
    deleteOnTermination: Boolean?
    encrypted: Boolean?
    iops: Int?
    snapshotId: String?
    volumeSize: Int?
    volumeType: VolumeType?
}

@aws.SubResourceHint
open class LaunchTemplateSpecification extends formae.SubResource {
    launchTemplateId: String?
    launchTemplateName: (String(matches(Regex(#"[a-zA-Z0-9\(\)\.\-/_]+"#))))?
    version: String
}

@aws.SubResourceHint
open class SecurityGroupIdentifier extends formae.SubResource {
    groupId: String
}

@aws.SubResourceHint
open class IamInstanceProfile extends formae.SubResource {
    arn: String?
}

@aws.SubResourceHint
open class Ipv6Address extends formae.SubResource {
    ipv6Address: String
}

@aws.SubResourceHint
open class NetworkInterface extends formae.SubResource {
    associatePublicIpAddress: Boolean?
    deleteOnTermination: Boolean?
    description: String?
    deviceIndex: Int?
    @aws.FieldHint{writeOnly = true}
    groups: Listing<String>?
    ipv6AddressCount: Int?
    ipv6Addresses: Listing<Ipv6Address>?
    networkInterfaceId: String?
    privateIpAddresses: Listing<PrivateIpAddress>?
    secondaryPrivateIpAddressCount: Int?
    subnetId: String?
}

typealias AcceleratorManufacturers = "amazon-web-services"|"amd"|"habana"|"nvidia"|"xilinx"

typealias AcceleratorNames = "a10g"|"a100"|"h100"|"inferentia"|"k520"|"k80"|"m60"|"radeon-pro-v520"|"t4"|"t4g"|"vu9p"|"v100"

typealias AcceleratorTypes = "gpu"|"fpga"|"inference"

typealias BareMetal = "included"|"required"|"excluded"

typealias BurstablePerformance = "included"|"required"|"excluded"

typealias CpuManufacturers = "intel"|"amd"|"amazon-web-services"|"apple"

typealias InstanceGenerations = "current"|"previous"

typealias LocalStorage = "included"|"required"|"excluded"

typealias LocalStorageTypes = "hdd"|"ssd"

@aws.SubResourceHint
open class InstanceRequirements extends formae.SubResource {
    acceleratorCount: AcceleratorCount?
    acceleratorManufacturers: Listing<AcceleratorManufacturers>?
    acceleratorNames: Listing<AcceleratorNames>?
    acceleratorTotalMemoryMiB: AcceleratorTotalMemoryMiB?
    acceleratorTypes: Listing<AcceleratorTypes>?
    allowedInstanceTypes: Listing<String>?
    bareMetal: BareMetal?
    baselineEbsBandwidthMbps: BaselineEbsBandwidthMbps?
    baselinePerformanceFactors: BaselinePerformanceFactors?
    burstablePerformance: BurstablePerformance?
    cpuManufacturers: Listing<CpuManufacturers>?
    excludedInstanceTypes: Listing<String>?
    instanceGenerations: Listing<InstanceGenerations>?
    localStorage: LocalStorage?
    localStorageTypes: Listing<LocalStorageTypes>?
    maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Int?
    memoryGiBPerVCpu: MemoryGiBPerVCpu?
    memoryMiB: MemoryMiB?
    networkBandwidthGbps: NetworkBandwidthGbps?
    networkInterfaceCount: NetworkInterfaceCount?
    onDemandMaxPricePercentageOverLowestPrice: Int?
    requireHibernateSupport: Boolean?
    spotMaxPricePercentageOverLowestPrice: Int?
    totalLocalStorageGB: TotalLocalStorageGB?
    vCpuCount: VCpuCount?
}

@aws.SubResourceHint
open class LaunchTemplateConfig extends formae.SubResource {
    launchTemplateSpecification: LaunchTemplateSpecification?
    overrides: Listing<Overrides>?
}

@aws.SubResourceHint
open class Overrides extends formae.SubResource {
    availabilityZone: aws.AvailabilityZone?
    instanceRequirements: InstanceRequirements?
    instanceType: String?
    priority: Number?
    spotPrice: String?
    subnetId: String?
    weightedCapacity: Number?
}

@aws.SubResourceHint
open class LoadBalancersConfig extends formae.SubResource {
    classicLoadBalancersConfig: ClassicLoadBalancersConfig?
    targetGroupsConfig: TargetGroupsConfig?
}

@aws.SubResourceHint
open class MemoryGiBPerVCpu extends formae.SubResource {
    max: Number?
    min: Number?
}

@aws.SubResourceHint
open class MemoryMiB extends formae.SubResource {
    max: Int?
    min: Int?
}

@aws.SubResourceHint
open class NetworkBandwidthGbps extends formae.SubResource {
    max: Number?
    min: Number?
}

@aws.SubResourceHint
open class NetworkInterfaceCount extends formae.SubResource {
    max: Int?
    min: Int?
}

@aws.SubResourceHint
open class Reference extends formae.SubResource {
    instanceFamily: String?
}

@aws.SubResourceHint
open class PrivateIpAddress extends formae.SubResource {
    primary: Boolean?
    privateIpAddress: String
}

typealias SpotCapacityRebalanceReplacementStrategy = "launch"|"launch-before-terminate"

@aws.SubResourceHint
open class CapacityRebalance extends formae.SubResource {
    replacementStrategy: SpotCapacityRebalanceReplacementStrategy?
    terminationDelay: Int?
}

@aws.SubResourceHint
open class LaunchSpecification extends formae.SubResource {
    blockDeviceMappings: Listing<BlockDeviceMapping>?
    ebsOptimized: Boolean?
    iamInstanceProfile: IamInstanceProfile?
    imageId: String
    instanceRequirements: InstanceRequirements?
    instanceType: String?
    kernelId: String?
    keyName: String?
    monitoring: Monitoring?
    networkInterfaces: Listing<NetworkInterface>?
    placement: Placement?
    ramdiskId: String?
    securityGroups: Listing<SecurityGroupIdentifier>?
    spotPrice: String?
    subnetId: String?

    @aws.FieldHint{writeOnly = true}
    tagSpecifications: Listing<TagSpecification>?

    userData: String?
    weightedCapacity: Number?
}

@aws.SubResourceHint
open class Monitoring extends formae.SubResource {
    enabled: Boolean?
}

typealias AllocationStrategy = "capacityOptimized"|"capacityOptimizedPrioritized"|"diversified"|"lowestPrice"|"priceCapacityOptimized"

typealias ExcessCapacityTerminationPolicy = "Default"|"NoTermination"|"default"|"noTermination"

typealias InstanceInterruptionBehavior = "hibernate"|"stop"|"terminate"

typealias TargetCapacityUnitType = "vcpu"|"memory-mib"|"units"

typealias SpotFleetType = "maintain"|"request"

@aws.SubResourceHint
open class SpotFleetRequestConfigData extends formae.SubResource {
    allocationStrategy: AllocationStrategy?
    context: String?
    excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
    iamFleetRole: String
    instanceInterruptionBehavior: InstanceInterruptionBehavior?
    instancePoolsToUseCount: Int?
    launchSpecifications: Listing<LaunchSpecification>?
    launchTemplateConfigs: Listing<LaunchTemplateConfig>?
    loadBalancersConfig: LoadBalancersConfig?
    onDemandAllocationStrategy: String?
    onDemandMaxTotalPrice: String?
    onDemandTargetCapacity: Int?
    replaceUnhealthyInstances: Boolean?
    spotMaintenanceStrategies: SpotMaintenanceStrategies?
    spotMaxTotalPrice: String?
    spotPrice: String?
    tagSpecifications: Listing<TagSpecification>?
    targetCapacity: Int
    targetCapacityUnitType: TargetCapacityUnitType?
    terminateInstancesWithExpiration: Boolean?
    type: SpotFleetType?
    validFrom: String?
    validUntil: String?
}

typealias resourceType = "client-vpn-endpoint"|"customer-gateway"|"dedicated-host"|"dhcp-options"|"egress-only-internet-gateway"|"elastic-gpu"|"elastic-ip"|"export-image-task"|"export-instance-task"|"fleet"|"fpga-image"|"host-reservation"|"image"|"import-image-task"|"import-snapshot-task"|"instance"|"internet-gateway"|"key-pair"|"launch-template"|"local-gateway-route-table-vpc-association"|"natgateway"|"network-acl"|"network-insights-analysis"|"network-insights-path"|"network-interface"|"placement-group"|"reserved-instances"|"route-table"|"security-group"|"snapshot"|"spot-fleet-request"|"spot-instances-request"|"subnet"|"traffic-mirror-filter"|"traffic-mirror-session"|"traffic-mirror-target"|"transit-gateway"|"transit-gateway-attachment"|"transit-gateway-connect-peer"|"transit-gateway-multicast-domain"|"transit-gateway-route-table"|"volume"|"vpc"|"vpc-flow-log"|"vpc-peering-connection"|"vpn-connection"|"vpn-gateway"

@aws.SubResourceHint
open class TagSpecification extends formae.SubResource {
    resourceType: resourceType?
    tags: Listing<formae.Tag>?
}

@aws.SubResourceHint
open class SpotMaintenanceStrategies extends formae.SubResource {
    capacityRebalance: CapacityRebalance?
}

typealias SpotPlacementTenancy = "dedicated"|"default"|"host"

@aws.SubResourceHint
open class Placement extends formae.SubResource {
    availabilityZone: aws.AvailabilityZone?
    groupName: String?
    tenancy: SpotPlacementTenancy?
}


@aws.SubResourceHint
open class TargetGroup extends formae.SubResource {
    arn: String
}

@aws.SubResourceHint
open class TargetGroupsConfig extends formae.SubResource {
    targetGroups: Listing<TargetGroup>
}

@aws.SubResourceHint
open class TotalLocalStorageGB extends formae.SubResource {
    max: Number?
    min: Number?
}

@aws.SubResourceHint
open class VCpuCount extends formae.SubResource {
    max: Int?
    min: Int?
}

@aws.ResourceHint {
    type = module.type
    identifier = "Id"
}
open class SpotFleet extends formae.Resource {

    @aws.FieldHint
    spotFleetRequestConfigData: SpotFleetRequestConfigData
}
