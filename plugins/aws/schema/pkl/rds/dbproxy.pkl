/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

module aws.rds.dbproxy

import "@formae/formae.pkl"
import "../aws.pkl"

const type = "AWS::RDS::DBProxy"

typealias AuthScheme = "SECRETS"

typealias ClientPasswordAuthType = "MYSQL_NATIVE_PASSWORD"|"POSTGRES_SCRAM_SHA_256"|"POSTGRES_MD5"|"SQL_SERVER_AUTHENTICATION"

typealias IAMAuth = "DISABLED"|"REQUIRED"|"ENABLED"

typealias DBProxyEngineFamily = "MYSQL"|"POSTGRESQL"|"SQLSERVER"


@aws.SubResourceHint
open class DBProxyAuthFormat extends formae.SubResource {
    authScheme: AuthScheme?
    clientPasswordAuthType: ClientPasswordAuthType?
    description: String?
    @aws.FieldHint{
        outputField = "IAMAuth"
    }
    iamAuth: IAMAuth?
    secretArn: (String|formae.Resolvable)?
}


open class DBProxyResolvable extends formae.Resolvable {
    hidden type = module.type

    hidden dbProxyArn: DBProxyResolvable = (this) {
        property = "DBProxyArn"
    }
    hidden endpoint: DBProxyResolvable = (this) {
        property = "Endpoint"
    }
    hidden vpcId : DBProxyResolvable = (this) {
        property = "VpcId"
    }
}


@aws.ResourceHint {
    type = module.type
    identifier = "DBProxyName"
}
open class DBProxy extends formae.Resource {

    @aws.FieldHint
    auth: Listing<DBProxyAuthFormat>


    @aws.FieldHint{
        createOnly = true
        outputField = "DBProxyName"
    }
    dBProxyName: String(matches(Regex(#"[0-z]*"#)))

    @aws.FieldHint
    debugLogging: Boolean?

    @aws.FieldHint{createOnly = true}
    engineFamily: DBProxyEngineFamily

    @aws.FieldHint
    idleClientTimeout: Int?

    @aws.FieldHint
    requireTLS: Boolean?

    @aws.FieldHint
    roleArn: String|formae.Resolvable

    @aws.FieldHint
    tags: Listing<formae.Tag>?

    @aws.FieldHint
    vpcSecurityGroupIds: (Listing<String|formae.Resolvable>)?

    @aws.FieldHint{createOnly = true}
    vpcSubnetIds: Listing<String|formae.Resolvable>

    hidden parent = this

    hidden res: DBProxyResolvable = new {
        label = parent.label
        stack = parent.stack?.label
    }
}