/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

module aws.lambda.func

import "@formae/formae.pkl"
import "../aws.pkl"

const type = "AWS::Lambda::Function"

@aws.SubResourceHint
open class Code extends formae.SubResource {
    @aws.FieldHint{writeOnly = true}
    imageUri: String?

    @aws.FieldHint{writeOnly = true}
    s3Bucket: (String(matches(Regex(#"^[0-9A-Za-z\.\-_]*(?<!\.)$"#))))?

    @aws.FieldHint{writeOnly = true}
    s3Key: String?

    @aws.FieldHint{writeOnly = true}
    s3ObjectVersion: String?

    sourceKMSKeyArn: (String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#))))?

    @aws.FieldHint{writeOnly = true}
    zipFile: String?
}

@aws.SubResourceHint
open class DeadLetterConfig extends formae.SubResource {
    targetArn: (String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#))))?
}

@aws.SubResourceHint
open class Environment extends formae.SubResource {
    variables: Mapping<String, Any>?
}

@aws.SubResourceHint
open class EphemeralStorage extends formae.SubResource {
    size: Int
}

@aws.SubResourceHint
open class FileSystemConfig extends formae.SubResource {
    arn: String(matches(Regex(#"^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$"#)))
    localMountPath: String(matches(Regex(#"^/mnt/[a-zA-Z0-9-_.]+$"#)))
}

@aws.SubResourceHint
open class ImageConfig extends formae.SubResource {
    command: Listing<String>?
    entryPoint: Listing<String>?
    workingDirectory: String?
}

typealias LoggingConfigApplicationLogLevel = "TRACE"|"DEBUG"|"INFO"|"WARN"|"ERROR"|"FATAL"

typealias LoggingConfigLogFormat = "Text"|"JSON"

typealias LoggingConfigSystemLogLevel = "DEBUG"|"INFO"|"WARN"

typealias Architecture = "x86_64"|"arm64"

typealias PackageType = "Image"|"Zip"

@aws.SubResourceHint
open class LoggingConfig extends formae.SubResource {
    applicationLogLevel: LoggingConfigApplicationLogLevel?
    logFormat: LoggingConfigLogFormat?
    logGroup: (String(matches(Regex(#"[\.\-_/#A-Za-z0-9]+"#))))?
    systemLogLevel: LoggingConfigSystemLogLevel?
}

typealias RuntimeManagementConfigUpdateRuntimeOn = "Auto"|"FunctionUpdate"|"Manual"

@aws.SubResourceHint
open class RuntimeManagementConfig extends formae.SubResource {
    runtimeVersionArn: String?
    updateRuntimeOn: RuntimeManagementConfigUpdateRuntimeOn
}

typealias SnapStartApplyOn = "PublishedVersions"|"None"

@aws.SubResourceHint
open class SnapStart extends formae.SubResource {
    applyOn: SnapStartApplyOn
}

typealias TracingConfigMode = "Active"|"PassThrough"

@aws.SubResourceHint
open class TracingConfig extends formae.SubResource {
    mode: TracingConfigMode?
}

@aws.SubResourceHint
open class VPCConfig extends formae.SubResource {
    ipv6AllowedForDualStack: Boolean?
    securityGroupIds: Listing<String|formae.Resolvable>?
    subnetIds: Listing<String|formae.Resolvable>?
}

open class FunctionResolvable extends formae.Resolvable {
    hidden type = module.type

    hidden arn: FunctionResolvable = (this) {
        property = "Arn"
    }
}

@aws.ResourceHint {
    type = module.type
    identifier = "FunctionName"
    tags = "Tags"
}
open class Function extends formae.Resource {

    @aws.FieldHint{createOnly = true}
    architectures: Listing<Architecture>?

    @aws.FieldHint
    code: Code

    @aws.FieldHint{createOnly = true}
    codeSigningConfigArn: (String(matches(Regex(#"arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}"#))))?

    @aws.FieldHint
    deadLetterConfig: DeadLetterConfig?

    @aws.FieldHint
    description: String?

    @aws.FieldHint
    environment: Environment?

    @aws.FieldHint
    ephemeralStorage: EphemeralStorage?

    @aws.FieldHint{createOnly = true}
    fileSystemConfigs: Listing<FileSystemConfig>?

    @aws.FieldHint{createOnly = true}
    functionName: String?

    @aws.FieldHint
    handler: (String(matches(Regex(#"^[^\s]+$"#))))?

    @aws.FieldHint{createOnly = true}
    imageConfig: ImageConfig?

    @aws.FieldHint
    kmsKeyArn: (String(matches(Regex(#"^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$"#))))?

    @aws.FieldHint
    layers: Listing<String>?

    @aws.FieldHint
    loggingConfig: LoggingConfig?

    @aws.FieldHint
    memorySize: Int?

    @aws.FieldHint{createOnly = true}
    packageType: PackageType?

    @aws.FieldHint
    recursiveLoop: String?

    @aws.FieldHint
    reservedConcurrentExecutions: Int?

    @aws.FieldHint{createOnly = true}
    role: String(matches(Regex(#"^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$"#)))|formae.Resolvable

    @aws.FieldHint{createOnly = true}
    runtime: String?

    @aws.FieldHint
    runtimeManagementConfig: RuntimeManagementConfig?

    @aws.FieldHint{
        createOnly = true
        writeOnly = true
    }
    snapStart: SnapStart?

    @aws.FieldHint
    tags: Listing<formae.Tag>?

    @aws.FieldHint
    timeout: Int?

    @aws.FieldHint
    tracingConfig: TracingConfig?

    @aws.FieldHint
    vpcConfig: VPCConfig?

    hidden parent = this

    hidden res: FunctionResolvable = new {
        label = parent.label
        stack = parent.stack?.label
    }
}