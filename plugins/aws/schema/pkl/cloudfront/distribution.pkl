/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

module aws.cloudfront.distribution

import "@formae/formae.pkl"
import "../aws.pkl"

const type = "AWS::CloudFront::Distribution"

typealias PriceClassType = "PriceClass_100"|"PriceClass_200"|"PriceClass_All"

typealias HttpVersionType = "http1.1"|"http2"|"http3"|"http2and3"

typealias ViewerProtocolPolicyType = "redirect-to-https"|"allow-all"|"https-only"

typealias SSLSupportMethodType = "sni-only"|"vip"

typealias OriginProtocolPolicyType = "http-only"|"match-viewer"|"https-only"

typealias ForwardType = "none"|"whitelist"|"all"

typealias RestrictionType = "blacklist"|"whitelist"|"none"

typealias EventType = "viewer-request"|"viewer-response"|"origin-request"|"origin-response"


@aws.SubResourceHint
open class DistributionConfig extends formae.SubResource {
    aliases: Listing<String>?
    anycastIpListId: String?
    @aws.FieldHint{outputField = "CNAMEs"}
    cnames: Listing<String>?
    cacheBehaviors: Listing<CacheBehavior>?
    comment: String?
    continuousDeploymentPolicyId: String?
    customErrorResponses: Listing<CustomErrorResponse>?
    customOrigin: CustomOrigin?
    defaultCacheBehavior: DefaultCacheBehavior
    defaultRootObject: String?
    enabled: Boolean
    httpVersion: HttpVersionType?
    @aws.FieldHint{outputField = "IPV6Enabled"}
    ipV6Enabled: Boolean?
    logging: Logging?
    originGroups: OriginGroups?
    origins: Listing<Origin>?
    priceClass: PriceClassType?
    restrictions: Restrictions?
    s3Origin: S3Origin?
    staging: Boolean?
    viewerCertificate: ViewerCertificate?
    webACLId: String?
}

@aws.SubResourceHint
open class CacheBehavior extends formae.SubResource {
    allowedMethods: Listing<String>?
    cachePolicyId: String?
    cachedMethods: Listing<String>?
    compress: Boolean?
    defaultTTL: Number?
    fieldLevelEncryptionId: String?
    forwardedValues: ForwardedValues?
    functionAssociations: Listing<FunctionAssociation>?
    grpcConfig: GrpcConfig?
    lambdaFunctionAssociations: Listing<LambdaFunctionAssociation>?
    maxTTL: Number?
    minTTL: Number?
    originRequestPolicyId: String?
    pathPattern: String
    realtimeLogConfigArn: String?
    responseHeadersPolicyId: String?
    smoothStreaming: Boolean?
    targetOriginId: String
    trustedKeyGroups: Listing<String>?
    trustedSigners: Listing<String>?
    viewerProtocolPolicy: ViewerProtocolPolicyType
}

@aws.SubResourceHint
open class Cookies extends formae.SubResource {
    forward: ForwardType
    whitelistedNames: Listing<String>?
}

@aws.SubResourceHint
open class CustomErrorResponse extends formae.SubResource {
    errorCachingMinTTL: Number?
    errorCode: Int
    responseCode: Int?
    responsePagePath: String?
}

@aws.SubResourceHint
open class CustomOriginConfig extends formae.SubResource {
    @aws.FieldHint{outputField = "HTTPPort"}
    httpPort: Int?
    @aws.FieldHint{outputField = "HTTPSPort"}
    httpsPort: Int?
    originKeepaliveTimeout: Int?
    originProtocolPolicy: OriginProtocolPolicyType
    originReadTimeout: Int?
    originSSLProtocols: Listing<String>?
}

@aws.SubResourceHint
open class DefaultCacheBehavior extends formae.SubResource {
    allowedMethods: Listing<String>?
    cachePolicyId: String?
    cachedMethods: Listing<String>?
    compress: Boolean?
    defaultTTL: Number?
    fieldLevelEncryptionId: String?
    forwardedValues: ForwardedValues?
    functionAssociations: Listing<FunctionAssociation>?
    grpcConfig: GrpcConfig?
    lambdaFunctionAssociations: Listing<LambdaFunctionAssociation>?
    maxTTL: Number?
    minTTL: Number?
    originRequestPolicyId: String?
    realtimeLogConfigArn: String?
    responseHeadersPolicyId: String?
    smoothStreaming: Boolean?
    targetOriginId: String
    trustedKeyGroups: Listing<String>?
    trustedSigners: Listing<String>?
    viewerProtocolPolicy: ViewerProtocolPolicyType
}

@aws.SubResourceHint
open class ForwardedValues extends formae.SubResource {
    cookies: Cookies?
    headers: Listing<String>?
    queryString: Boolean
    queryStringCacheKeys: Listing<String>?
}

@aws.SubResourceHint
open class FunctionAssociation extends formae.SubResource {
    eventType: EventType?
    functionARN: String?
}

@aws.SubResourceHint
open class GeoRestriction extends formae.SubResource {
    locations: Listing<String>?
    restrictionType: RestrictionType
}

@aws.SubResourceHint
open class GrpcConfig extends formae.SubResource {
    enabled: Boolean
}

@aws.SubResourceHint
open class LambdaFunctionAssociation extends formae.SubResource {
    eventType: EventType?
    includeBody: Boolean?
    lambdaFunctionARN: String?
}

@aws.SubResourceHint
open class CustomOrigin extends formae.SubResource {
    @aws.FieldHint{outputField = "DNSName"}
    dnsName: String
    @aws.FieldHint{outputField = "HTTPPort"}
    httpPort: Int?
    @aws.FieldHint{outputField = "HTTPSPort"}
    httpsPort: Int?
    originProtocolPolicy: String
    originSSLProtocols: Listing<String>
}

@aws.SubResourceHint
open class S3Origin extends formae.SubResource {
    @aws.FieldHint{outputField = "DNSName"}
    dnsName: String
    originAccessIdentity: String?
}

@aws.SubResourceHint
open class Logging extends formae.SubResource {
    bucket: String?
    includeCookies: Boolean?
    prefix: String?
}

@aws.SubResourceHint
open class Origin extends formae.SubResource {
    connectionAttempts: Int?
    connectionTimeout: Int?
    customOriginConfig: CustomOriginConfig?
    domainName: String|formae.Resolvable
    id: String|formae.Resolvable
    originAccessControlId: String?
    originCustomHeaders: Listing<OriginCustomHeader>?
    originPath: String?
    originShield: OriginShield?
    s3OriginConfig: S3OriginConfig?
    vpcOriginConfig: VpcOriginConfig?
}

@aws.SubResourceHint
open class OriginCustomHeader extends formae.SubResource {
    headerName: String
    headerValue: String
}

@aws.SubResourceHint
open class OriginGroup extends formae.SubResource {
    failoverCriteria: FailoverCriteria
    id: String
    members: Members
    selectionCriteria: String?
}

@aws.SubResourceHint
open class FailoverCriteria extends formae.SubResource {
    statusCodes: StatusCodes
}

@aws.SubResourceHint
open class Member extends formae.SubResource {
    originId: String
}

@aws.SubResourceHint
open class Members extends formae.SubResource {
    items: Listing<Member>
    quantity: Int
}


@aws.SubResourceHint
open class OriginGroups extends formae.SubResource {
    items: Listing<OriginGroup>?
    quantity: Int
}

@aws.SubResourceHint
open class OriginShield extends formae.SubResource {
    enabled: Boolean?
    originShieldRegion: aws.Region?
}

@aws.SubResourceHint
open class Restrictions extends formae.SubResource {
    geoRestriction: GeoRestriction
}

@aws.SubResourceHint
open class S3OriginConfig extends formae.SubResource {
    originAccessIdentity: String?
}

@aws.SubResourceHint
open class StatusCodes extends formae.SubResource {
    items: Listing<Int>
    quantity: Int
}

@aws.SubResourceHint
open class ViewerCertificate extends formae.SubResource {
    acmCertificateArn: String?
    cloudFrontDefaultCertificate: Boolean?
    iamCertificateId: String?
    minimumProtocolVersion: String?
    sslSupportMethod: SSLSupportMethodType?
}

@aws.SubResourceHint
open class VpcOriginConfig extends formae.SubResource {
    originKeepaliveTimeout: Int?
    originReadTimeout: Int?
    vpcOriginId: String
}

open class DistributionResolvable extends formae.Resolvable {
    hidden type = module.type

    hidden id: DistributionResolvable = (this) {
        property = "Id"
    }

    hidden domainName: DistributionResolvable = (this) {
        property = "DomainName"
    }
}

@aws.ResourceHint {
    type = module.type
    identifier = "Id"
    tags = "Tags"
    discoverable = false
    extractable = false
}
open class Distribution extends formae.Resource {

    @aws.FieldHint
    distributionConfig: DistributionConfig

    @aws.FieldHint
    tags: Listing<formae.Tag>?

    local parent = this

    hidden res: DistributionResolvable = new {
        label = parent.label
        stack = parent.stack?.label
    }
}
