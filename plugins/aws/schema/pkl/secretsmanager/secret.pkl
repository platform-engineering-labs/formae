/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

module aws.secretsmanager.secret

import "@formae/formae.pkl"
import "../aws.pkl"

const type = "AWS::SecretsManager::Secret"

@aws.SubResourceHint
open class GenerateSecretString extends formae.SubResource {
    excludeCharacters: String?
    excludeLowercase: Boolean?
    excludeNumbers: Boolean?
    excludePunctuation: Boolean?
    excludeUppercase: Boolean?
    generateStringKey: String?
    includeSpace: Boolean?
    passwordLength: Int?
    requireEachIncludedType: Boolean?
    secretStringTemplate: String?
}


@aws.SubResourceHint
open class ReplicaRegion extends formae.SubResource {
    kmsKeyId: (String|formae.Resolvable)?
    region: aws.Region
}


open class SecretResolvable extends formae.Resolvable {
    type = module.type

    hidden arn: SecretResolvable = (this) {
        property = "Arn"
    }

    hidden id: SecretResolvable = (this) {
        property = "Id"
    }

    hidden name: SecretResolvable = (this) {
        property = "Name"
    }

    hidden ref: SecretResolvable = (this) {
        property = "Ref"
    }

    hidden secretString: SecretResolvable = (this) {
        property = "SecretString"
    }
}


@aws.ResourceHint {
    type = module.type
    identifier = "Id"
    tags = "Tags"
}
open class Secret extends formae.Resource {
    @aws.FieldHint
    description: String?

    @aws.FieldHint {
        writeOnly = true
    }
    generateSecretString: GenerateSecretString?

    @aws.FieldHint
    kmsKeyId: (String|formae.Resolvable)?


    @aws.FieldHint {
        createOnly = true
    }
    name: String?


    @aws.FieldHint
    replicaRegions: Listing<ReplicaRegion>?


    @aws.FieldHint {
        writeOnly = true
    }
    hidden secretString: (formae.Value|String)?

    @aws.FieldHint {
        outputTransformation = formae.transform.capitalizeMemberKeys
    }
    tags: Listing<formae.Tag>?

    local parent = this

    hidden res: SecretResolvable = new {
        label = parent.label
        stack = parent.stack?.label
    }
}
