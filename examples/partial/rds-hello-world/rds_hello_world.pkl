/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

amends "@formae/forma.pkl"
import "@formae/formae.pkl"

// VPC and Networking
import "@aws/ec2/vpc.pkl"
import "@aws/ec2/vpcgatewayattachment.pkl" // Needed for attaching IGW to VPC
import "@aws/ec2/subnet.pkl"
import "@aws/ec2/securitygroup.pkl"
import "@aws/ec2/securitygroupingress.pkl"
import "@aws/ec2/internetgateway.pkl" // Needed for public subnet connectivity
import "@aws/ec2/routetable.pkl"      // Needed for public subnet connectivity
import "@aws/ec2/route.pkl"           // Needed for public subnet connectivity
import "@aws/ec2/subnetroutetableassociation.pkl" // Needed for public subnet connectivity
import "@aws/rds/dbsubnetgroup.pkl"
import "@aws/ec2/keypair.pkl"
import "@aws/rds/dbinstance.pkl"
import "@aws/ec2/instance.pkl"

import "./vars.pkl"

properties {
    name = new formae.Prop {
        flag = "name"
        default = vars.projectName
    }
    region = vars.regionProp
    vpcCidr = new formae.Prop {
        flag = "vpcCidr"
        default = "10.1.0.0/16"
    }
    subnetCidr1 = new formae.Prop {
        flag = "subnetCidr1"
        default = "10.1.1.0/24" // Public subnet for ALB and Fargate tasks
    }
    subnetCidr2 = new formae.Prop {
        flag = "subnetCidr2"
        default = "10.1.2.0/24" // Public subnet 2
    }
    availabilityZone1 = new formae.Prop {
        flag = "az1"
        default = vars.availabilityZone1
    }
    availabilityZone2 = new formae.Prop {
        flag = "az2"
        default = vars.availabilityZone2
    }
}


forma {
    vars.stack
    vars.target

    // --- Networking ---

    // VPC
    local vpc = new vpc.VPC {
        label = vars.vpcLabel
        cidrBlock = properties.vpcCidr.value
        enableDnsHostnames = true
        enableDnsSupport = true
        tags { new { key = "Name"; value = properties.name.value + "-vpc" } }
    }
    vpc

     // Internet Gateway for public subnet
    local igw = new internetgateway.InternetGateway {
        label = "rds-igw"
        tags { new { key = "Name"; value = properties.name.value + "-igw" } }
    }
    igw

    // Attach IGW to VPC
    local attachIgw = new vpcgatewayattachment.VPCGatewayAttachment {
        label = "rds-igw-attachment"
        vpcId = vpc.res.id
        internetGatewayId = igw.res.id // Assuming InternetGatewayResolvable has Id mapped to InternetGatewayId
    }
    attachIgw

    // Public Subnet
    local subnet1 = new subnet.Subnet {
        label = "rds-public-subnet-1"
        vpcId = vpc.res.id
        cidrBlock = properties.subnetCidr1.value
        availabilityZone = properties.availabilityZone1.value
        mapPublicIpOnLaunch = true // Important for Fargate tasks needing outbound internet
        tags { new { key = "Name"; value = properties.name.value + "-public-subnet" } }
    }
    subnet1

    // Public Subnet 2
    local subnet2 = new subnet.Subnet {
        label = "rds-public-subnet-2"
        vpcId = vpc.res.id
        cidrBlock = properties.subnetCidr2.value
        availabilityZone = properties.availabilityZone2.value
        mapPublicIpOnLaunch = true // Important for Fargate tasks needing outbound internet
        tags { new { key = "Name"; value = properties.name.value + "-public-subnet-2" } }
    }
    subnet2

    // Route Table for public subnet
    local routeTable = new routetable.RouteTable {
        label = "rds-public-rt"
        vpcId = vpc.res.id
        tags { new { key = "Name"; value = properties.name.value + "-public-rt" } }
    }
    routeTable

    // Route to Internet Gateway
    local publicRoute = new route.Route {
        label = "rds-public-route"
        routeTableId = routeTable.res.id // Assuming RouteTableResolvable has Id mapped to RouteTableId
        destinationCidrBlock = "0.0.0.0/0"
        gatewayId = igw.res.id
    }
    publicRoute


    // Associate Route Table with Subnet
    local subnetAssoc1 = new subnetroutetableassociation.SubnetRouteTableAssociation {
        label = "rds-public-subnet-1-assoc"
        subnetId = subnet1.res.subnetId
        routeTableId = routeTable.res.id
    }
    subnetAssoc1

     // Associate Route Table with Subnet 2
    local subnetAssoc2 = new subnetroutetableassociation.SubnetRouteTableAssociation {
        label = "rds-public-subnet-2-assoc"
        subnetId = subnet2.res.subnetId
        routeTableId = routeTable.res.id
    }
    subnetAssoc2

    // Security group for RDS (allow MySQL from EC2 SG)
    local rdsSg = new securitygroup.SecurityGroup {
        label = "rds-db-sg"
        groupDescription = "Allow MySQL access from EC2"
        vpcId = vpc.res.id
        tags {
            new { key = "Name"; value = "rds-db-sg" }
        }
    }
    rdsSg

    local rdsSgIngress = new securitygroupingress.SecurityGroupIngress {
        label = "rds-db-sg-ingress"
        ipProtocol = "tcp"
        fromPort = 3306
        toPort = 3306
        // Reference EC2 SG below
        sourceSecurityGroupId = ec2Sg.res.groupId
        groupId = rdsSg.res.groupId
    }

    rdsSgIngress

    // Security group for EC2 (allow SSH and egress to RDS)
    local ec2Sg = new securitygroup.SecurityGroup {
        label = "ec2-rds-instance-sg"
        groupDescription = "Allow SSH and DB egress"
        vpcId = vpc.res.id
        tags {
            new { key = "Name"; value = "ec2-instance-sg" }
        }
    }
    ec2Sg

    local ec2SgIngress = new securitygroupingress.SecurityGroupIngress {
        label = "ec2-rds-sg-ingress"
        ipProtocol = "tcp"
        fromPort = 22
        toPort = 22
        cidrIp = "0.0.0.0/0"
        groupId = ec2Sg.res.groupId
    }
    ec2SgIngress

    // DB Subnet Group
    local dbSubnetGroup = new dbsubnetgroup.DBSubnetGroup {
        label = "rds-db-subnet-group"
        dbSubnetGroupDescription = "Subnet group for RDS"
        subnetIds {subnet1.res.subnetId; subnet2.res.subnetId}
        tags {
            new { key = "Name"; value = "rds-db-subnet-group" }
        }
    }
    dbSubnetGroup

    // Key pair for EC2
    local kp = new keypair.KeyPair {
        label = "rds-ec2-keypair"
        keyName = "rds-ec2-keypair"
    }
    kp

    // RDS Instance (MySQL example)
    new dbinstance.DBInstance {
        label = "rds-db-instance"
        dbInstanceIdentifier = "rds-hello-db"
        allocatedStorage = 20
        dbInstanceClass = "db.t3.micro"
        engine = "mysql"
        engineVersion = "8.0"
        masterUsername = "admin"
        masterUserPassword = "ChangeMe123!"
        vpcSecurityGroups {rdsSg.res.groupId}
        dbSubnetGroupName = dbSubnetGroup.dbSubnetGroupName
        publiclyAccessible = true
        multiAZ = false
        tags {
            new { key = "Name"; value = "rds-db-instance" }
        }
    }

    // EC2 Instance
    new instance.Instance {
        label = "db-client-ec2"
        imageId = "ami-0ecf75a98fe8519d7"
        instanceType = "t3.micro"
        keyName = kp.keyName
        subnetId = subnet1.res.subnetId
        securityGroupIds {ec2Sg.res.groupId}
        tags {
            new { key = "Name"; value = "db-client-ec2" }
        }
        userData = """
            #!/bin/bash
            yum install -y mysql
        """.base64
    }
}