/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

import "@formae/formae.pkl"
import "@formae/ext/random.pkl"
import "@aws/aws.pkl"
import "@aws/s3/bucket.pkl"
import "@aws/kms/key.pkl"
import "@aws/efs/filesystem.pkl"
import "@aws/efs/mounttarget.pkl"
import "@aws/efs/accesspoint.pkl"
import "@aws/rds/dbinstance.pkl"
import "@aws/rds/dbsubnetgroup.pkl"
import "@aws/secretsmanager/secret.pkl"
import "@aws/ec2/subnet.pkl"
import "@aws/ec2/securitygroup.pkl"

class Storage {
  name: String
  region: aws.Region
  accountId: String
  vpcId: String
  privateSubnets: Listing<subnet.Subnet>
  efsSecurityGroup: securitygroup.SecurityGroup
  dbSecurityGroup: securitygroup.SecurityGroup
  dbInstanceClass: String
  dbUsername: String

  hidden kmsKey: key.Key = new {
    label = "\(name)-kms-key"
    description = "KMS key for ML platform encryption"
    enableKeyRotation = true
    keyPolicy {
      ["Version"] = "2012-10-17"
      ["Id"] = "key-policy"
      ["Statement"] {
        new {
          ["Sid"] = "EnableIAMUserPermissions"
          ["Effect"] = "Allow"
          ["Principal"] {
            AWS = "arn:aws:iam::\(accountId):root"
          }
          ["Action"] = "kms:*"
          ["Resource"] = "*"
        }
        new {
          ["Sid"] = "AllowCloudWatchLogs"
          ["Effect"] = "Allow"
          ["Principal"] {
            ["Service"] = "logs.\(region).amazonaws.com"
          }
          ["Action"] {
            "kms:Encrypt"
            "kms:Decrypt"
            "kms:ReEncrypt*"
            "kms:GenerateDataKey*"
            "kms:DescribeKey"
          }
          ["Resource"] = "*"
          ["Condition"] {
            ["ArnEquals"] {
              ["kms:EncryptionContext:aws:logs:arn"] = "arn:aws:logs:\(region):\(accountId):log-group:/aws/sagemaker/\(name)"
            }
          }
        }
      }
    }
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden fileSystem: filesystem.FileSystem = new {
    label = "\(name)-efs"
    encrypted = true
    kmsKeyId = kmsKey.res.arn
    performanceMode = "generalPurpose"
    throughputMode = "bursting"
    backupPolicy {
      status = "DISABLED"
    }
    fileSystemProtection {
      replicationOverwriteProtection = "ENABLED"
    }
    fileSystemTags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden mountTargets: Listing<mounttarget.MountTarget> = new {
    for (i, subnet in privateSubnets) {
      new mounttarget.MountTarget {
        label = "\(name)-efs-mount-target-\(i + 1)"
        fileSystemId = fileSystem.res.fileSystemId
        subnetId = subnet.res.subnetId
        securityGroups {
          efsSecurityGroup.res.groupId
        }
      }
    }
  }

  hidden accessPoints: Listing<accesspoint.AccessPoint> = new {
    new accesspoint.AccessPoint {
      label = "\(name)-ml-ops-access-point"
      fileSystemId = fileSystem.res.fileSystemId
      rootDirectory {
        path = "/200005"
        creationInfo {
          ownerUid = "200005"
          ownerGid = "0"
          permissions = "700"
        }
      }
      posixUser {
        uid = "200005"
        gid = "0"
      }
      clientToken = "200005:\(name)-domain:ml-ops"
      accessPointTags {
        new { key = "Name"; value = label }
        new { key = "ManagedBy"; value = "formae" }
      }
    }

    new accesspoint.AccessPoint {
      label = "\(name)-data-scientist-access-point"
      fileSystemId = fileSystem.res.fileSystemId
      rootDirectory {
        path = "/200010"
        creationInfo {
          ownerUid = "200010"
          ownerGid = "0"
          permissions = "700"
        }
      }
      posixUser {
        uid = "200010"
        gid = "0"
      }
      clientToken = "200010:\(name)-domain:data-scientist"
      accessPointTags {
        new { key = "Name"; value = label }
        new { key = "ManagedBy"; value = "formae" }
      }
    }
  }

  hidden trainingDataBucket: bucket.Bucket = new {
    label = "\(name)-training-data"
    bucketName = "\(name)-training-data-bucket"
    bucketEncryption {
      serverSideEncryptionConfiguration {
        new {
          serverSideEncryptionByDefault {
            sseAlgorithm = "aws:kms"
            kmsMasterKeyID = kmsKey.res.arn
          }
        }
      }
    }
    publicAccessBlockConfiguration {
      blockPublicAcls = true
      blockPublicPolicy = true
      ignorePublicAcls = true
      restrictPublicBuckets = true
    }
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden modelArtifactsBucket: bucket.Bucket = new {
    label = "\(name)-model-artifacts"
    bucketName = "\(name)-model-artifacts-bucket"
    bucketEncryption {
      serverSideEncryptionConfiguration {
        new {
          serverSideEncryptionByDefault {
            sseAlgorithm = "aws:kms"
            kmsMasterKeyID = kmsKey.res.arn
          }
        }
      }
    }
    publicAccessBlockConfiguration {
      blockPublicAcls = true
      blockPublicPolicy = true
      ignorePublicAcls = true
      restrictPublicBuckets = true
    }
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden dbSubnetGroup: dbsubnetgroup.DBSubnetGroup = new {
    label = "\(name)-db-subnet-group"
    dbSubnetGroupDescription = "Subnet group for ML platform database"
    subnetIds {
      for (subnet in privateSubnets) {
        subnet.res.subnetId
      }
    }
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden dbPasswordSecret: secret.Secret = new {
    label = "\(outer.name)-db-password"
    name = "\(outer.name)/db-password"
    description = "Database password for ML platform"
    secretString = formae.value(random.password(16, false)).opaque.setOnce
    kmsKeyId = kmsKey.res.arn
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden featureStoreDb: dbinstance.DBInstance = new {
    label = "\(name)-feature-store-db"
    allocatedStorage = 20
    dbInstanceClass = outer.dbInstanceClass
    engine = "postgres"
    engineVersion = "13"
    masterUsername = outer.dbUsername
    masterUserPassword = dbPasswordSecret.res.secretString
    dbSubnetGroupName = dbSubnetGroup.res.dbSubnetGroupName
    vpcSecurityGroups {
      dbSecurityGroup.res.groupId
    }
    storageEncrypted = true
    kmsKeyId = kmsKey.res.arn
    multiAZ = true
    backupRetentionPeriod = 7
    deleteAutomatedBackups = false
    deletionProtection = false
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  resources: Listing = new {
    kmsKey
    fileSystem
    ...mountTargets
    ...accessPoints
    trainingDataBucket
    modelArtifactsBucket
    dbSubnetGroup
    dbPasswordSecret
    featureStoreDb
  }
}