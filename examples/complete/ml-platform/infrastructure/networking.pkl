/*
 * Â© 2025 Platform Engineering Labs Inc.
 *
 * SPDX-License-Identifier: FSL-1.1-ALv2
 */

import "@aws/aws.pkl"
import "@aws/ec2/vpc.pkl"
import "@aws/ec2/subnet.pkl"
import "@aws/ec2/internetgateway.pkl"
import "@aws/ec2/natgateway.pkl"
import "@aws/ec2/eip.pkl"
import "@aws/ec2/routetable.pkl"
import "@aws/ec2/route.pkl"
import "@aws/ec2/subnetroutetableassociation.pkl"
import "@aws/ec2/vpcgatewayattachment.pkl"
import "@aws/ec2/securitygroup.pkl"
import "@aws/ec2/securitygroupingress.pkl"
import "@aws/ec2/securitygroupegress.pkl"
import "@aws/ec2/vpcendpoint.pkl"

class Networking {
  name: String
  region: aws.Region
  vpcCidr: String
  publicZoneCidrs: Mapping<String, String>
  privateZoneCidrs: Mapping<String, String>

  hidden vpc: vpc.VPC = new {
    label = "\(name)-vpc"
    cidrBlock = vpcCidr
    enableDnsHostnames = true
    enableDnsSupport = true
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden internetGateway: internetgateway.InternetGateway = new {
    label = "\(name)-igw"
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden natEip: eip.EIP = new {
    label = "\(name)-nat-eip"
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden publicSubnets: Listing<subnet.Subnet> = new {
    for (zone, cidr in publicZoneCidrs) {
      new subnet.Subnet {
        label = "\(name)-public-\(zone)"
        vpcId = vpc.res.id
        cidrBlock = cidr
        availabilityZone = "\(region)\(zone)"
        mapPublicIpOnLaunch = true
        tags {
          new { key = "Name"; value = label }
          new { key = "ManagedBy"; value = "formae" }
        }
      }
    }
  }

  hidden privateSubnets: Listing<subnet.Subnet> = new {
    for (zone, cidr in privateZoneCidrs) {
      new subnet.Subnet {
        label = "\(name)-private-\(zone)"
        vpcId = vpc.res.id
        cidrBlock = cidr
        availabilityZone = "\(region)\(zone)"
        mapPublicIpOnLaunch = false
        tags {
          new { key = "Name"; value = label }
          new { key = "ManagedBy"; value = "formae" }
        }
      }
    }
  }

  hidden natGateway: natgateway.NatGateway = new {
    label = "\(name)-nat"
    subnetId = publicSubnets.first.res.id
    allocationId = natEip.res.allocationId
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden publicRouteTable: routetable.RouteTable = new {
    label = "\(name)-public-rt"
    vpcId = vpc.res.id
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden privateRouteTable: routetable.RouteTable = new {
    label = "\(name)-private-rt"
    vpcId = vpc.res.id
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden mlSecurityGroup: securitygroup.SecurityGroup = new {
    label = "\(name)-ml-sg"
    groupDescription = "Security group for ML platform components"
    vpcId = vpc.res.id
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden efsSecurityGroup: securitygroup.SecurityGroup = new {
    label = "\(name)-efs-sg"
    groupDescription = "Security group for EFS NFS traffic"
    vpcId = vpc.res.id
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  hidden dbSecurityGroup: securitygroup.SecurityGroup = new {
    label = "\(name)-db-sg"
    groupDescription = "Security group for RDS instance"
    vpcId = vpc.res.id
    tags {
      new { key = "Name"; value = label }
      new { key = "ManagedBy"; value = "formae" }
    }
  }

  resources: Listing = new {
    vpc
    internetGateway
    
    new vpcgatewayattachment.VPCGatewayAttachment {
      label = "\(name)-vpc-igw-attachment"
      vpcId = vpc.res.id
      internetGatewayId = internetGateway.res.id
    }

    natEip
    ...publicSubnets
    ...privateSubnets
    natGateway

    publicRouteTable
    privateRouteTable

    new route.Route {
      label = "\(name)-public-internet-route"
      routeTableId = publicRouteTable.res.id
      destinationCidrBlock = "0.0.0.0/0"
      gatewayId = internetGateway.res.id
    }

    new route.Route {
      label = "\(name)-private-internet-route"
      routeTableId = privateRouteTable.res.id
      destinationCidrBlock = "0.0.0.0/0"
      natGatewayId = natGateway.res.id
    }

    for (i, subnet in publicSubnets) {
      new subnetroutetableassociation.SubnetRouteTableAssociation {
        label = "\(name)-public-subnet-\(i)-rt-association"
        subnetId = subnet.res.id
        routeTableId = publicRouteTable.res.id
      }
    }

    for (i, subnet in privateSubnets) {
      new subnetroutetableassociation.SubnetRouteTableAssociation {
        label = "\(name)-private-subnet-\(i)-rt-association"
        subnetId = subnet.res.id
        routeTableId = privateRouteTable.res.id
      }
    }

    mlSecurityGroup
    efsSecurityGroup
    dbSecurityGroup

    new securitygroupegress.SecurityGroupEgress {
      label = "\(name)-ml-sg-egress"
      groupId = mlSecurityGroup.res.groupId
      ipProtocol = "-1"
      fromPort = -1
      toPort = -1
      cidrIp = "0.0.0.0/0"
    }

    new securitygroupegress.SecurityGroupEgress {
      label = "\(name)-efs-sg-egress"
      groupId = efsSecurityGroup.res.groupId
      ipProtocol = "-1"
      fromPort = -1
      toPort = -1
      cidrIp = "0.0.0.0/0"
    }

    new securitygroupegress.SecurityGroupEgress {
      label = "\(name)-db-sg-egress"
      groupId = dbSecurityGroup.res.groupId
      ipProtocol = "-1"
      fromPort = -1
      toPort = -1
      cidrIp = "0.0.0.0/0"
    }

    new securitygroupingress.SecurityGroupIngress {
      label = "\(name)-ml-sg-https-ingress"
      groupId = mlSecurityGroup.res.groupId
      ipProtocol = "tcp"
      fromPort = 443
      toPort = 443
      cidrIp = "0.0.0.0/0"
      description = "HTTPS inbound"
    }

    new securitygroupingress.SecurityGroupIngress {
      label = "\(name)-efs-nfs-ingress"
      groupId = efsSecurityGroup.res.groupId
      ipProtocol = "tcp"
      fromPort = 2049
      toPort = 2049
      sourceSecurityGroupId = mlSecurityGroup.res.groupId
      description = "NFS from SageMaker"
    }

    new securitygroupingress.SecurityGroupIngress {
      label = "\(name)-efs-nfs-988-ingress"
      groupId = efsSecurityGroup.res.groupId
      ipProtocol = "tcp"
      fromPort = 988
      toPort = 988
      sourceSecurityGroupId = mlSecurityGroup.res.groupId
      description = "NFS 988 from SageMaker"
    }

    new securitygroupingress.SecurityGroupIngress {
      label = "\(name)-efs-nfs-range-ingress"
      groupId = efsSecurityGroup.res.groupId
      ipProtocol = "tcp"
      fromPort = 1018
      toPort = 1023
      sourceSecurityGroupId = mlSecurityGroup.res.groupId
      description = "NFS 1018-1023 from SageMaker"
    }

    new securitygroupingress.SecurityGroupIngress {
      label = "\(name)-db-postgres-ingress"
      groupId = dbSecurityGroup.res.groupId
      ipProtocol = "tcp"
      fromPort = 5432
      toPort = 5432
      sourceSecurityGroupId = mlSecurityGroup.res.groupId
      description = "PostgreSQL from ML platform"
    }

    new vpcendpoint.VPCEndpoint {
      label = "\(name)-s3-endpoint"
      vpcId = vpc.res.id
      serviceName = "com.amazonaws.\(region).s3"
      vpcEndpointType = "Gateway"
      routeTableIds {
        privateRouteTable.res.id
      }
      tags {
        new { key = "Name"; value = label }
        new { key = "ManagedBy"; value = "formae" }
      }
    }

    new vpcendpoint.VPCEndpoint {
      label = "\(name)-sagemaker-api-endpoint"
      vpcId = vpc.res.id
      serviceName = "com.amazonaws.\(region).sagemaker.api"
      vpcEndpointType = "Interface"
      privateDnsEnabled = true
      subnetIds {
        for (subnet in privateSubnets) {
          subnet.res.subnetId
        }
      }
      securityGroupIds {
        mlSecurityGroup.res.groupId
      }
      tags {
        new { key = "Name"; value = label }
        new { key = "ManagedBy"; value = "formae" }
      }
    }

    new vpcendpoint.VPCEndpoint {
      label = "\(name)-sagemaker-runtime-endpoint"
      vpcId = vpc.res.id
      serviceName = "com.amazonaws.\(region).sagemaker.runtime"
      vpcEndpointType = "Interface"
      privateDnsEnabled = true
      subnetIds {
        for (subnet in privateSubnets) {
          subnet.res.subnetId
        }
      }
      securityGroupIds {
        mlSecurityGroup.res.groupId
      }
      tags {
        new { key = "Name"; value = label }
        new { key = "ManagedBy"; value = "formae" }
      }
    }

    new vpcendpoint.VPCEndpoint {
      label = "\(name)-sagemaker-featurestore-endpoint"
      vpcId = vpc.res.id
      serviceName = "com.amazonaws.\(region).sagemaker.featurestore-runtime"
      vpcEndpointType = "Interface"
      privateDnsEnabled = true
      subnetIds {
        for (subnet in privateSubnets) {
          subnet.res.subnetId
        }
      }
      securityGroupIds {
        mlSecurityGroup.res.groupId
      }
      tags {
        new { key = "Name"; value = label }
        new { key = "ManagedBy"; value = "formae" }
      }
    }
  }
}